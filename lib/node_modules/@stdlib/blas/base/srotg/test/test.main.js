/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var srotg = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof srotg, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 2', function test( t ) {
	t.strictEqual( srotg.length, 2, 'arity of 2' );
	t.end();
});

tape( 'the function computes a Givens plane rotation', function test( t ) {
	var expected;
	var actual;

	expected = new Float32Array( [ 2.0, 1.0, 0.0, 1.0 ] );
	actual = srotg( 0.0, 2.0 );

	t.deepEqual( actual, expected, 'returns expected value' );

	expected = new Float32Array( [ -10.0, -1.6666666269302368, -0.6, 0.8 ] );
	actual = srotg( 6.0, -8.0 );

	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function computes a Givens plane rotation (a=0)', function test( t ) {
	var expected;
	var actual;

	expected = new Float32Array( [ 0.0, 0.0, 1.0, 0.0 ] );
	actual = srotg( 0.0, 0.0 );

	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function computes a Givens plane rotation (b=0)', function test( t ) {
	var expected;
	var actual;

	expected = new Float32Array( [ 1.0, 0.0, 1.0, 0.0 ] );
	actual = srotg( 1.0, 0.0 );

	t.deepEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function computes a Givens plane rotation ( a = NaN, b = NaN )', function test(t) {
	var actual;
	var i;

	actual = srotg( NaN, NaN );
	for ( i = 0; i < actual.length; i++ ) {
		t.strictEqual( isnan( actual[i] ), true, 'returns expected value' );
	}

	t.end();
});

tape( 'the function throws NaN when a is not number', function test( t ) {
	var actual;
	var values = [
		'a',
		undefined,
		NaN,
		{},
		function foo() {}
	];
	var i;
	var j;

	for ( i = 0; i < values.length; i++ ) {
		actual = srotg( values[i], 0.0 );
		for ( j = 0; j < actual.length; j++ ) {
			t.strictEqual( isnan( actual[j] ), true, 'returns expected value' );
		}
	}

	t.end();
});

tape( 'the function throws NaN when b is not number', function test( t ) {
	var actual;
	var values = [
		'a',
		undefined,
		NaN,
		{},
		function foo() {}
	];
	var i;
	var j;

	for ( i = 0; i < values.length; i++ ) {
		actual = srotg( 0.0, values[i] );
		for ( j = 0; j < actual.length; j++ ) {
			t.strictEqual( isnan( actual[j] ), true, 'returns expected value' );
		}
	}

	t.end();
});
