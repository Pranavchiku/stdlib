/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var pow = require( '@stdlib/math/base/special/pow' );
var min = require( '@stdlib/math/base/special/min' );
var max = require( '@stdlib/math/base/special/max' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );


// VARIABLES //

var safmin = 1.17549435E-38;
var safmax = 1.70141183E+38;
var one = 1.0;
var zero = 0.0;


// MAIN //

/**
* Constructs a Given plane rotation for single-precision values `A` and `B`.
*
* @param {number} a - rotational elimination parameter
* @param {number} b - rotational elimination parameter
* @param {Float32Array} out - destination array
* @param {integer} stride - index increment
* @param {integer} offset - starting index
*
* @example
* assign( 0.0, 2.0, out, 1, 0 );
* // throws <ReferenceError>
*/
function assign( a, b, out, stride, offset ) {
	var sigma;
	var anorm;
	var bnorm;
	var scl;
	var r;
	var z;
	var c;
	var s;

	anorm = abs( a );
	bnorm = abs( b );
	if ( bnorm === zero ) {
		c = one;
		s = zero;
		b = zero;
	} else if ( anorm === zero ) {
		c = zero;
		s = one;
		a = b;
		b = zero;
	} else {
		scl = min( safmax, max( safmin, anorm, bnorm ) );
		if ( anorm > bnorm ) {
			sigma = copysign( one, a );
		} else {
			sigma = copysign( one, b );
		}
		r = sigma*( scl * sqrt( pow( a/scl, 2 ) + pow( b/scl, 2 ) ) );
		c = a / r;
		s = b / r;
		if ( anorm > bnorm ) {
			z = s;
		} else if ( isInfinite( c ) ) {
			z = one / c;
		} else {
			z = one;
		}
		a = r;
		b = z;
	}
	out[ offset ] = a;
	out[ offset + stride ] = b;
	out[ offset + (2*stride) ] = c;
	out[ offset + (3*stride) ] = s;
}


// EXPORTS //

module.exports = assign;
