/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var Float64Array = require( '@stdlib/array/float64' );
var dtrsm = require( './../lib' );

var A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
var B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

var out = dtrsm( 'column-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, 0.0, 6.0, 12.0 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'column-major', 'left', 'lower', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, -12.0, 0.0, 12.0 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'row-major', 'left', 'lower', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, 0.0, -12.0, 12.0 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'column-major', 'left', 'upper', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, -22.5, 42, -19.5 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'row-major', 'left', 'upper', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30.0, 42.0, -22.5, -19.5 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'column-major', 'left', 'lower', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ -1.5, 10.5, -36, 12 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'row-major', 'left', 'lower', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ -1.5, -36, 10.5, 12 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'column-major', 'right', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, 0, -12, 12 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'row-major', 'right', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, -12, 0, 12 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'column-major', 'right', 'lower', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, 6, 0, 12 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'row-major', 'right', 'lower', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, 0, 6, 12 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'column-major', 'right', 'upper', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ -1.5, -36, 10.5, 12 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'row-major', 'right', 'upper', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ -1.5, 10.5, -36, 12 ]

A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm( 'column-major', 'right', 'lower', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, 42, -22.5, -19.5 ]

A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

out = dtrsm( 'row-major', 'right', 'lower', 'transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
console.log( out );
// => <Float64Array>[ 30, -22.5, 42, -19.5 ]

A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
B = new Float64Array( [ 0.0, 5.0, 7.0, 0.0, 8.0 ] );

out = dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 2, B, 2, 1 );
console.log( out );
// => <Float64Array>[ 0.0, 30.0, 6.0, 0.0, 12.0 ]
