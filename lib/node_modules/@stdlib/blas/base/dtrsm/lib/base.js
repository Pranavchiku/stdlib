/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B`.
*
* @private
* @param {string} orderA - specifies the memory layout of `A`.
* @param {string} orderB - specifies the memory layout of `B`.
* @param {string} side - specifies whether `op( A )` appears on the left or right of `X`.
* @param {string} uplo - specifies whether the matrix `A` is an upper or lower triangular matrix.
* @param {string} transa - specifies the form of `op( A )` to be used in matrix multiplication.
* @param {string} diag - specifies whether or not `A` is unit triangular.
* @param {NonNegativeInteger} m - number of rows in `B`.
* @param {NonNegativeInteger} n - number of columns in `B`.
* @param {number} alpha - scalar alpha.
* @param {Float64Array} A - input matrix `A`.
* @param {NonNegativeInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {NonNegativeInteger} offsetA - index offset for matrix `A`.
* @param {Float64Array} B - input matrix `B`.
* @param {NonNegativeInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @param {NonNegativeInteger} offsetB - index offset for matrix `B`.
* @returns {Float64Array} matrix `B`.
*
* @example
* TODO:
*/
function dtrsm( orderA, orderB, side, uplo, transa, diag, m, n, alpha, A, LDA, offsetA, B, LDB, offsetB ) { // eslint-disable-line max-len
	var nounit;
	var lside;
	var lower;
	var upper;
	var tmp;
	var i;
	var j;
	var k;

	lside = side === 'L';
	nounit = diag === 'N';
	upper = uplo === 'U';

	// TODO: remove it
	offsetB = offsetA;
	offsetA = offsetB;

	if ( m === 0 || n === 0 ) {
		return B;
	}
	if ( alpha === 0.0 ) {
		if ( orderB === 'row-major' ) {
			for ( j = 0; j < n; j++ ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + j ] = 0.0;
				}
			}
			return B;
		}
		for ( j = 0; j < n; j++ ) {
			for ( i = 0; i < m; i++ ) {
				B[ ( j * LDB ) + i ] = 0.0;
			}
		}
		return B;
	}
	if ( lside ) {
		if ( transa === 'N' ) {
			// B := alpha * inv( A ) * B
			if ( orderB === 'column-major' ) {
				if ( orderA === 'column-major' && upper ) {
					for ( j = 0; j < n; j++ ) {
						if ( alpha !== 1 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] *= alpha;
							}
						}
						for ( k = m - 1; k >= 0; k-- ) {
							if ( B[ ( j * LDB ) + k ] !== 0 ) {
								if ( nounit ) {
									B[ ( j * LDB ) + k ] /= A[ ( k * LDA ) + k ];
								}
								for ( i = 0; i < k; i++ ) {
									B[ ( j * LDB ) + i ] -= B[ ( j * LDB ) + k ] * A[ ( k * LDA ) + i ];
								}
							}
						}
					}
					return B;
				}
				if ( orderA === 'row-major' && lower ) {
					for ( j = 0; j < n; j++ ) {
						if ( alpha !== 1 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] *= alpha;
							}
						}
						for ( k = m - 1; k >= 0; k-- ) {
							if ( B[ ( j * LDB ) + k ] !== 0 ) {
								if ( nounit ) {
									B[ ( j * LDB ) + k ] /= A[ ( k * LDA ) + k ];
								}
								for ( i = 0; i < k; i++ ) {
									B[ ( j * LDB ) + i ] -= B[ ( j * LDB ) + k ] * A[ ( i * LDA ) + k ];
								}
							}
						}
					}
					return B;
				}
				if ( orderA === 'column-major' && lower ) {
					for ( j = 0; j < n; j++ ) {
						if ( alpha !== 1 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] *= alpha;
							}
						}
						for ( k = 0; k < m; k++ ) {
							if ( B[ ( j * LDB ) + k ] !== 0 ) {
								if ( nounit ) {
									B[ ( j * LDB ) + k ] /= A[ ( k * LDA ) + k ];
								}
								for ( i = k; i < m; i++ ) {
									B[ ( j * LDB ) + i ] -= B[ ( j * LDB ) + k ] * A[ ( k * LDA ) + i ];
								}
							}
						}
					}
					return B;
				}
				// ( orderA === "row-major" && upper )
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= alpha;
						}
					}
					for ( k = 0; k < m; k++ ) {
						if ( B[ ( j * LDB ) + k ] !== 0 ) {
							if ( nounit ) {
								B[ ( j * LDB ) + k ] /= A[ ( k * LDA ) + k ];
							}
							for ( i = k + 1; i < m; i++ ) {
								B[ ( j * LDB ) + i ] -= B[ ( j * LDB ) + k ] * A[ ( i * LDA ) + k ];
							}
						}
					}
				}
				return B;
			}
			// orderB === "row-major"
			if ( orderA === 'column-major' && upper ) {
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] *= alpha;
						}
					}
					for ( k = m - 1; k >= 0; k-- ) {
						if ( B[ ( k * LDB ) + j ] !== 0 ) {
							if ( nounit ) {
								B[ ( k * LDB ) + j ] /= A[ ( k * LDA ) + k ];
							}
							for ( i = 0; i < k; i++ ) {
								B[ ( i * LDB ) + j ] -= B[ ( k * LDB ) + j ] * A[ ( k * LDA ) + i ];
							}
						}
					}
				}
				return B;
			}
			if ( orderA === 'row-major' && lower ) {
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] *= alpha;
						}
					}
					for ( k = m - 1; k >= 0; k-- ) {
						if ( B[ ( k * LDB ) + j ] !== 0 ) {
							if ( nounit ) {
								B[ ( k * LDB ) + j ] /= A[ ( k * LDA ) + k ];
							}
							for ( i = 0; i < k; i++ ) {
								B[ ( i * LDB ) + j ] -= B[ ( k * LDB ) + j ] * A[ ( i * LDA ) + k ];
							}
						}
					}
				}
				return B;
			}
			if ( orderA === 'column-major' && lower ) {
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] *= alpha;
						}
					}
					for ( k = 0; k < m; k++ ) {
						if ( B[ ( k * LDB ) + j ] !== 0 ) {
							if ( nounit ) {
								B[ ( k * LDB ) + j ] /= A[ ( k * LDA ) + k ];
							}
							for ( i = k; i < m; i++ ) {
								B[ ( i * LDB ) + j ] -= B[ ( k * LDB ) + j ] * A[ ( k * LDA ) + i ];
							}
						}
					}
				}
				return B;
			}
			// ( orderA === "row-major" && upper )
			for ( j = 0; j < n; j++ ) {
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= alpha;
					}
				}
				for ( k = 0; k < m; k++ ) {
					if ( B[ ( k * LDB ) + j ] !== 0 ) {
						if ( nounit ) {
							B[ ( k * LDB ) + j ] /= A[ ( k * LDA ) + k ];
						}
						for ( i = k + 1; i < m; i++ ) {
							B[ ( i * LDB ) + j ] -= B[ ( k * LDB ) + j ] * A[ ( i * LDA ) + k ];
						}
					}
				}
			}
			return B;
		}
		// B := alpha * inv( A**T ) * B
		if ( orderB === 'column-major' ) {
			if ( orderA === 'column-major' && upper ) {
				for ( j = 0; j < n; j++ ) {
					for ( i = 0; i < m; i++ ) {
						tmp = alpha * B[ ( j * LDB ) + i ];
						for ( k = 0; k < i - 1; k++ ) {
							tmp -= A[ ( i * LDA ) + k ] * B[ ( j * LDB ) + k ];
						}
						if ( nounit ) {
							tmp /= A[ ( i * LDA ) + i ];
						}
						B[ ( j * LDB ) + i ] = tmp;
					}
				}
				return B;
			}
			if ( orderA === 'row-major' && lower ) {
				for ( j = 0; j < n; j++ ) {
					for ( i = 0; i < m; i++ ) {
						tmp = alpha * B[ ( j * LDB ) + i ];
						for ( k = 0; k < i - 1; k++ ) {
							tmp -= A[ ( k * LDA ) + i ] * B[ ( j * LDB ) + k ];
						}
						if ( nounit ) {
							tmp /= A[ ( i * LDA ) + i ];
						}
						B[ ( j * LDB ) + i ] = tmp;
					}
				}
				return B;
			}
			if ( orderA === 'column-major' && lower ) {
				for ( j = 0; j < n; j++ ) {
					for ( i = m - 1; i >= 0; i-- ) {
						tmp = alpha * B[ ( j * LDB ) + i ];
						for ( k = i; k < m; k++ ) {
							tmp -= A[ ( i * LDA ) + k ] * B[ ( j * LDB ) + k ];
						}
						if ( nounit ) {
							tmp /= A[ ( i * LDA ) + i ];
						}
						B[ ( j * LDB ) + i ] = tmp;
					}
				}
				return B;
			}
			// ( orderA === "row-major" && upper )
			for ( j = 0; j < n; j++ ) {
				for ( i = 0; i < m; i++ ) {
					tmp = alpha * B[ ( j * LDB ) + i ];
					for ( k = i; k < m; k++ ) {
						tmp -= A[ ( k * LDA ) + i ] * B[ ( j * LDB ) + k ];
					}
					if ( nounit ) {
						tmp /= A[ ( i * LDA ) + i ];
					}
					B[ ( j * LDB ) + i ] = tmp;
				}
			}
			return B;
		}
	}
	// !lside
	if ( transa === 'N' ) {
		// B := alpha * B * inv( A )
		if ( orderB === 'column-major' ) {
			if ( orderA === 'column-major' && upper ) {
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= alpha;
						}
					}
					for ( k = 0; k < j - 1; k++ ) {
						if ( A[ ( j * LDA ) + k ] !== 0 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] -= A[ ( j * LDA ) + k ] * B[ ( k * LDB ) + i ];
							}
						}
					}
					if ( nounit ) {
						tmp = 1.0 / A[ ( j * LDA ) + j ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= tmp;
						}
					}
				}
				return B;
			}
			if ( orderA === 'row-major' && lower ) {
				for ( j = 0; j < n; j++ ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= alpha;
						}
					}
					for ( k = 0; k < j - 1; k++ ) {
						if ( A[ ( k * LDA ) + j ] !== 0 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] -= A[ ( k * LDA ) + j ] * B[ ( k * LDB ) + i ];
							}
						}
					}
					if ( nounit ) {
						tmp = 1.0 / A[ ( j * LDA ) + j ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= tmp;
						}
					}
				}
				return B;
			}
			if ( orderA === 'column-major' && lower ) {
				for ( j = n - 1; j >= 0; j-- ) {
					if ( alpha !== 1 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= alpha;
						}
					}
					for ( k = j; k < n; k++ ) {
						if ( A[ ( j * LDA ) + k ] !== 0 ) {
							for ( i = 0; i < m; i++ ) {
								B[ ( j * LDB ) + i ] -= A[ ( j * LDA ) + k ] * B[ ( k * LDB ) + i ];
							}
						}
					}
					if ( nounit ) {
						tmp = 1.0 / A[ ( j * LDA ) + j ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] *= tmp;
						}
					}
				}
				return B;
			}
			// ( orderA === "row-major" && upper )
			for ( j = n - 1; j >= 0; j-- ) {
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( j * LDB ) + i ] *= alpha;
					}
				}
				for ( k = j; k < n; k++ ) {
					if ( A[ ( k * LDA ) + j ] !== 0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] -= A[ ( k * LDA ) + j ] * B[ ( k * LDB ) + i ];
						}
					}
				}
				if ( nounit ) {
					tmp = 1.0 / A[ ( j * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( j * LDB ) + i ] *= tmp;
					}
				}
			}
			return B;
		}
		// orderB === "row-major"
		if ( orderA === 'column-major' && upper ) {
			for ( j = 0; j < n; j++ ) {
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= alpha;
					}
				}
				for ( k = 0; k < j - 1; k++ ) {
					if ( A[ ( j * LDA ) + k ] !== 0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] -= A[ ( j * LDA ) + k ] * B[ ( i * LDB ) + k ];
						}
					}
				}
				if ( nounit ) {
					tmp = 1.0 / A[ ( j * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= tmp;
					}
				}
			}
			return B;
		}
		if ( orderA === 'row-major' && lower ) {
			for ( j = 0; j < n; j++ ) {
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= alpha;
					}
				}
				for ( k = 0; k < j - 1; k++ ) {
					if ( A[ ( k * LDA ) + j ] !== 0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] -= A[ ( k * LDA ) + j ] * B[ ( i * LDB ) + k ];
						}
					}
				}
				if ( nounit ) {
					tmp = 1.0 / A[ ( j * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= tmp;
					}
				}
			}
			return B;
		}
		if ( orderA === 'column-major' && lower ) {
			for ( j = n - 1; j >= 0; j-- ) {
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= alpha;
					}
				}
				for ( k = j; k < n; k++ ) {
					if ( A[ ( j * LDA ) + k ] !== 0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ( i * LDB ) + j ] -= A[ ( j * LDA ) + k ] * B[ ( i * LDB ) + k ];
						}
					}
				}
				if ( nounit ) {
					tmp = 1.0 / A[ ( j * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] *= tmp;
					}
				}
			}
			return B;
		}
		// ( orderA === "row-major" && upper )
		for ( j = n - 1; j >= 0; j-- ) {
			if ( alpha !== 1 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + j ] *= alpha;
				}
			}
			for ( k = j; k < n; k++ ) {
				if ( A[ ( k * LDA ) + j ] !== 0 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] -= A[ ( k * LDA ) + j ] * B[ ( i * LDB ) + k ];
					}
				}
			}
			if ( nounit ) {
				tmp = 1.0 / A[ ( j * LDA ) + j ];
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + j ] *= tmp;
				}
			}
		}
		return B;
	}
	// B := alpha * B * inv( A**T )
	if ( orderB === 'column-major' ) {
		if ( orderA === 'column-major' && upper ) {
			for ( k = n - 1; k >= 0; k-- ) {
				if ( nounit ) {
					tmp = 1.0 / A[ ( k * LDA ) + k ];
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= tmp;
					}
				}
				for ( j = 0; j < k - 1; j++ ) {
					if ( A[ ( k * LDA ) + j ] !== 0 ) {
						tmp = A[ ( k * LDA ) + j ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] -= tmp * B[ ( k * LDB ) + i ];
						}
					}
				}
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= alpha;
					}
				}
			}
			return B;
		}
		if ( orderA === 'row-major' && lower ) {
			for ( k = n - 1; k >= 0; k-- ) {
				if ( nounit ) {
					tmp = 1.0 / A[ ( k * LDA ) + k ];
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= tmp;
					}
				}
				for ( j = 0; j < k - 1; j++ ) {
					if ( A[ ( j * LDA ) + k ] !== 0 ) {
						tmp = A[ ( j * LDA ) + k ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] -= tmp * B[ ( k * LDB ) + i ];
						}
					}
				}
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= alpha;
					}
				}
			}
			return B;
		}
		if ( orderA === 'column-major' && lower ) {
			for ( k = 0; k < n; k++ ) {
				if ( nounit ) {
					tmp = 1.0 / A[ ( k * LDA ) + k ];
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= tmp;
					}
				}
				for ( j = k; j < n; j++ ) {
					if ( A[ ( k * LDA ) + j ] !== 0 ) {
						tmp = A[ ( k * LDA ) + j ];
						for ( i = 0; i < m; i++ ) {
							B[ ( j * LDB ) + i ] -= tmp * B[ ( k * LDB ) + i ];
						}
					}
				}
				if ( alpha !== 1 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ( k * LDB ) + i ] *= alpha;
					}
				}
			}
			return B;
		}
		// ( orderA === "row-major" && upper )
		for ( k = 0; k < n; k++ ) {
			if ( nounit ) {
				tmp = 1.0 / A[ ( k * LDA ) + k ];
				for ( i = 0; i < m; i++ ) {
					B[ ( k * LDB ) + i ] *= tmp;
				}
			}
			for ( j = k; j < n; j++ ) {
				if ( A[ ( j * LDA ) + k ] !== 0 ) {
					tmp = A[ ( j * LDA ) + k ];
					for ( i = 0; i < m; i++ ) {
						B[ ( j * LDB ) + i ] -= tmp * B[ ( k * LDB ) + i ];
					}
				}
			}
			if ( alpha !== 1 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( k * LDB ) + i ] *= alpha;
				}
			}
		}
		return B;
	}
	// orderB === "row-major"
	if ( orderA === 'column-major' && upper ) {
		for ( k = n - 1; k >= 0; k-- ) {
			if ( nounit ) {
				tmp = 1.0 / A[ ( k * LDA ) + k ];
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= tmp;
				}
			}
			for ( j = 0; j < k - 1; j++ ) {
				if ( A[ ( k * LDA ) + j ] !== 0 ) {
					tmp = A[ ( k * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] -= tmp * B[ ( i * LDB ) + k ];
					}
				}
			}
			if ( alpha !== 1 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= alpha;
				}
			}
		}
		return B;
	}
	if ( orderA === 'row-major' && lower ) {
		for ( k = n - 1; k >= 0; k-- ) {
			if ( nounit ) {
				tmp = 1.0 / A[ ( k * LDA ) + k ];
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= tmp;
				}
			}
			for ( j = 0; j < k - 1; j++ ) {
				if ( A[ ( j * LDA ) + k ] !== 0 ) {
					tmp = A[ ( j * LDA ) + k ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] -= tmp * B[ ( i * LDB ) + k ];
					}
				}
			}
			if ( alpha !== 1 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= alpha;
				}
			}
		}
		return B;
	}
	if ( orderA === 'column-major' && lower ) {
		for ( k = 0; k < n; k++ ) {
			if ( nounit ) {
				tmp = 1.0 / A[ ( k * LDA ) + k ];
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= tmp;
				}
			}
			for ( j = k; j < n; j++ ) {
				if ( A[ ( k * LDA ) + j ] !== 0 ) {
					tmp = A[ ( k * LDA ) + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ( i * LDB ) + j ] -= tmp * B[ ( i * LDB ) + k ];
					}
				}
			}
			if ( alpha !== 1 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + k ] *= alpha;
				}
			}
		}
		return B;
	}
	// ( orderA === "row-major" && upper )
	for ( k = 0; k < n; k++ ) {
		if ( nounit ) {
			tmp = 1.0 / A[ ( k * LDA ) + k ];
			for ( i = 0; i < m; i++ ) {
				B[ ( i * LDB ) + k ] *= tmp;
			}
		}
		for ( j = k; j < n; j++ ) {
			if ( A[ ( j * LDA ) + k ] !== 0 ) {
				tmp = A[ ( j * LDA ) + k ];
				for ( i = 0; i < m; i++ ) {
					B[ ( i * LDB ) + j ] -= tmp * B[ ( i * LDB ) + k ];
				}
			}
		}
		if ( alpha !== 1 ) {
			for ( i = 0; i < m; i++ ) {
				B[ ( i * LDB ) + k ] *= alpha;
			}
		}
	}
	return B;
}


// EXPORTS //

module.exports = dtrsm;
