/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var isMatrixTriangle = require( '@stdlib/blas/base/assert/is-matrix-triangle' );
var isOperationSide = require( '@stdlib/blas/base/assert/is-operation-side' );
var isTransposeOperation = require( '@stdlib/blas/base/assert/is-transpose-operation' );
var isDiagonalType = require( '@stdlib/blas/base/assert/is-diagonal-type' );
var format = require( '@stdlib/string/format' );
var base = require( './base.js' );


// MAIN //

/**
* Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B`.
*
* @private
* @param {string} orderA - specifies the memory layout of `A`.
* @param {string} orderB - specifies the memory layout of `B`.
* @param {string} side - specifies whether `op( A )` appears on the left or right of `X`.
* @param {string} uplo - specifies whether the matrix `A` is an upper or lower triangular matrix.
* @param {string} transa - specifies the form of `op( A )` to be used in matrix multiplication.
* @param {string} diag - specifies whether or not `A` is unit triangular.
* @param {NonNegativeInteger} m - number of rows in `B`.
* @param {NonNegativeInteger} n - number of columns in `B`.
* @param {number} alpha - scalar alpha.
* @param {Float64Array} A - input matrix `A`.
* @param {NonNegativeInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {NonNegativeInteger} offsetA - index offset for matrix `A`.
* @param {Float64Array} B - input matrix `B`.
* @param {NonNegativeInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @param {NonNegativeInteger} offsetB - index offset for matrix `B`.
* @throws {TypeError} first argument must be a valid order.
* @throws {TypeError} second argument must be a valid order.
* @throws {TypeError} third argument must be a valid side.
* @throws {TypeError} fourth argument must specify whether the lower or upper triangular matrix is supplied.
* @throws {TypeError} fifth argument must specify correct transpose operation.
* @throws {TypeError} sixth argument must specify whether the matrix is unit triangular or not.
* @returns {Float64Array} matrix `B`.
*
* @example
* TODO:
*/
function dtrsm( orderA, orderB, side, uplo, transa, diag, m, n, alpha, A, LDA, offsetA, B, LDB, offsetB ) { // eslint-disable-line max-len
	if ( !isLayout( orderA ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', orderA ) );
	}
	if ( !isLayout( orderB ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a valid order. Value: `%s`.', orderB ) );
	}
	if ( !isOperationSide( side ) ) {
		throw new TypeError( format( 'invalid argument. Third argument must be a valid side. Value: `%s`.', side ) );
	}
	if ( !isMatrixTriangle( uplo ) ) {
		throw new TypeError( format( 'invalid argument. Fourth argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );
	}
	if ( !isTransposeOperation( transa ) ) {
		throw new TypeError( format( 'invalid argument. Fifth argument must specify correct transpose operation. Value: `%s`.', transa ) );
	}
	if ( !isDiagonalType( diag ) ) {
		throw new TypeError( format( 'invalid argument. Sixth argument must specify whether the matrix is unit triangular or not. Value: `%s`.', diag ) );
	}
	return base( orderA, orderB, side, uplo, transa, diag, m, n, alpha, A, LDA, offsetA, B, LDB, offsetB ); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = dtrsm;
