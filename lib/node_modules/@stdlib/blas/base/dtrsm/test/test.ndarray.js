/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dtrsm = require( './../lib/ndarray.js' );


// FIXTURES //

var cndllntwotwo = require( './fixtures/column_major_ndarray_llntwotwo.json' );

var rndllntwotwo = require( './fixtures/row_major_ndarray_llntwotwo.json' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dtrsm, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 14', function test( t ) {
	t.strictEqual( dtrsm.length, 14, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( value, cndllntwotwo.side, cndllntwotwo.uplo, cndllntwotwo.transa, cndllntwotwo.diag, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, new Float64Array( cndllntwotwo.a ), cndllntwotwo.lda, cndllntwotwo.offsetA, new Float64Array( cndllntwotwo.b ), cndllntwotwo.ldb, cndllntwotwo.offsetB );
		};
	}
});

tape( 'the function throws an error if provided an invalid second argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( cndllntwotwo.order, value, cndllntwotwo.uplo, cndllntwotwo.transa, cndllntwotwo.diag, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, new Float64Array( cndllntwotwo.a ), cndllntwotwo.lda, cndllntwotwo.offsetA, new Float64Array( cndllntwotwo.b ), cndllntwotwo.ldb, cndllntwotwo.offsetB );
		};
	}
});

tape( 'the function throws an error if provided an invalid third argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( cndllntwotwo.order, cndllntwotwo.side, value, cndllntwotwo.transa, cndllntwotwo.diag, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, new Float64Array( cndllntwotwo.a ), cndllntwotwo.lda, cndllntwotwo.offsetA, new Float64Array( cndllntwotwo.b ), cndllntwotwo.ldb, cndllntwotwo.offsetB );
		};
	}
});

tape( 'the function throws an error if provided an invalid fourth argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( cndllntwotwo.order, cndllntwotwo.side, cndllntwotwo.uplo, value, cndllntwotwo.diag, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, new Float64Array( cndllntwotwo.a ), cndllntwotwo.lda, cndllntwotwo.offsetA, new Float64Array( cndllntwotwo.b ), cndllntwotwo.ldb, cndllntwotwo.offsetB );
		};
	}
});

tape( 'the function throws an error if provided an invalid fifth argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( cndllntwotwo.order, cndllntwotwo.side, cndllntwotwo.uplo, cndllntwotwo.transa, value, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, new Float64Array( cndllntwotwo.a ), cndllntwotwo.lda, cndllntwotwo.offsetA, new Float64Array( cndllntwotwo.b ), cndllntwotwo.ldb, cndllntwotwo.offsetB );
		};
	}
});

tape( 'the function Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( cndllntwotwo.a );
	B = new Float64Array( cndllntwotwo.b );

	expected = new Float64Array( cndllntwotwo.expected );

	out = dtrsm( cndllntwotwo.order, cndllntwotwo.side, cndllntwotwo.uplo, cndllntwotwo.transa, cndllntwotwo.diag, cndllntwotwo.m, cndllntwotwo.n, cndllntwotwo.alpha, A, cndllntwotwo.lda, cndllntwotwo.offsetA, B, cndllntwotwo.ldb, cndllntwotwo.offsetB );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rndllntwotwo.a );
	B = new Float64Array( rndllntwotwo.b );

	expected = new Float64Array( rndllntwotwo.expected );

	out = dtrsm( rndllntwotwo.order, rndllntwotwo.side, rndllntwotwo.uplo, rndllntwotwo.transa, rndllntwotwo.diag, rndllntwotwo.m, rndllntwotwo.n, rndllntwotwo.alpha, A, rndllntwotwo.lda, rndllntwotwo.offsetA, B, rndllntwotwo.ldb, rndllntwotwo.offsetB );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});
