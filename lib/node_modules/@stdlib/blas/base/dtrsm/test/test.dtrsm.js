/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dtrsm = require( './../lib/dtrsm.js' );


// FIXTURES //

var cllntwotwo = require( './fixtures/column_major_llntwotwo.json' );
var cllutwotwo = require( './fixtures/column_major_llutwotwo.json' );
var clunntwotwo = require( './fixtures/column_major_lunntwotwo.json' );
var cluutwotwo = require( './fixtures/column_major_luutwotwo.json' );
var crlunntwotwo = require( './fixtures/column_major_rlunntwotwo.json' );
var crunntwotwo = require( './fixtures/column_major_runntwotwo.json' );
var cllnthreethree = require( './fixtures/column_major_llnthreethree.json' );

var rllntwotwo = require( './fixtures/row_major_llntwotwo.json' );
var rllutwotwo = require( './fixtures/row_major_llutwotwo.json' );
var rlunntwotwo = require( './fixtures/row_major_lunntwotwo.json' );
var rluutwotwo = require( './fixtures/row_major_luutwotwo.json' );
var rrlunntwotwo = require( './fixtures/row_major_rlunntwotwo.json' );
var rrunntwotwo = require( './fixtures/row_major_runntwotwo.json' );
var rllnthreethree = require( './fixtures/row_major_llnthreethree.json' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dtrsm, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 12', function test( t ) {
	t.strictEqual( dtrsm.length, 12, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var A;
	var B;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	A = new Float64Array( [ 1.0, 0.0, 3.0, 4.0 ] );
	B = new Float64Array( [ 5.0, 0.0, 7.0, 8.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( value, "left", "upper", "no-transpose", "non-unit", 2, 2, 6.0, A, 2, B, 2 );
		};
	}
});

tape( 'the function throws an error if provided an invalid second argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( clunntwotwo.order, value, clunntwotwo.uplo, clunntwotwo.transa, clunntwotwo.diag, clunntwotwo.m, clunntwotwo.n, clunntwotwo.alpha, new Float64Array( clunntwotwo.a ), clunntwotwo.lda, new Float64Array( clunntwotwo.b ), clunntwotwo.ldb );
		};
	}
});

tape( 'the function throws an error if provided an invalid third argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( clunntwotwo.order, clunntwotwo.side, value, clunntwotwo.transa, clunntwotwo.diag, clunntwotwo.m, clunntwotwo.n, clunntwotwo.alpha, new Float64Array( clunntwotwo.a ), clunntwotwo.lda, new Float64Array( clunntwotwo.b ), clunntwotwo.ldb );
		};
	}
});

tape( 'the function throws an error if provided an invalid fourth argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( clunntwotwo.order, clunntwotwo.side, clunntwotwo.uplo, value, clunntwotwo.diag, clunntwotwo.m, clunntwotwo.n, clunntwotwo.alpha, new Float64Array( clunntwotwo.a ), clunntwotwo.lda, new Float64Array( clunntwotwo.b ), clunntwotwo.ldb );
		};
	}
});

tape( 'the function throws an error if provided an invalid fifth argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( clunntwotwo.order, clunntwotwo.side, clunntwotwo.uplo, clunntwotwo.transa, value, clunntwotwo.m, clunntwotwo.n, clunntwotwo.alpha, new Float64Array( clunntwotwo.a ), clunntwotwo.lda, new Float64Array( clunntwotwo.b ), clunntwotwo.ldb );
		};
	}
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( cllntwotwo.a );
	B = new Float64Array( cllntwotwo.b );

	expected = new Float64Array( cllntwotwo.expected );

	out = dtrsm( cllntwotwo.order, cllntwotwo.side, cllntwotwo.uplo, cllntwotwo.transa, cllntwotwo.diag, cllntwotwo.m, cllntwotwo.n, cllntwotwo.alpha, A, cllntwotwo.lda, B, cllntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( cllutwotwo.a );
	B = new Float64Array( cllutwotwo.b );

	expected = new Float64Array( cllutwotwo.expected );

	out = dtrsm( cllutwotwo.order, cllutwotwo.side, cllutwotwo.uplo, cllutwotwo.transa, cllutwotwo.diag, cllutwotwo.m, cllutwotwo.n, cllutwotwo.alpha, A, cllutwotwo.lda, B, cllutwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( clunntwotwo.a );
	B = new Float64Array( clunntwotwo.b );

	expected = new Float64Array( clunntwotwo.expected );

	out = dtrsm( clunntwotwo.order, clunntwotwo.side, clunntwotwo.uplo, clunntwotwo.transa, clunntwotwo.diag, clunntwotwo.m, clunntwotwo.n, clunntwotwo.alpha, A, clunntwotwo.lda, B, clunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( cluutwotwo.a );
	B = new Float64Array( cluutwotwo.b );

	expected = new Float64Array( cluutwotwo.expected );

	out = dtrsm( cluutwotwo.order, cluutwotwo.side, cluutwotwo.uplo, cluutwotwo.transa, cluutwotwo.diag, cluutwotwo.m, cluutwotwo.n, cluutwotwo.alpha, A, cluutwotwo.lda, B, cluutwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( crlunntwotwo.a );
	B = new Float64Array( crlunntwotwo.b );

	expected = new Float64Array( crlunntwotwo.expected );

	out = dtrsm( crlunntwotwo.order, crlunntwotwo.side, crlunntwotwo.uplo, crlunntwotwo.transa, crlunntwotwo.diag, crlunntwotwo.m, crlunntwotwo.n, crlunntwotwo.alpha, A, crlunntwotwo.lda, B, crlunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( crunntwotwo.a );
	B = new Float64Array( crunntwotwo.b );

	expected = new Float64Array( crunntwotwo.expected );

	out = dtrsm( crunntwotwo.order, crunntwotwo.side, crunntwotwo.uplo, crunntwotwo.transa, crunntwotwo.diag, crunntwotwo.m, crunntwotwo.n, crunntwotwo.alpha, A, crunntwotwo.lda, B, crunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rllntwotwo.a );
	B = new Float64Array( rllntwotwo.b );

	expected = new Float64Array( rllntwotwo.expected );

	out = dtrsm( rllntwotwo.order, rllntwotwo.side, rllntwotwo.uplo, rllntwotwo.transa, rllntwotwo.diag, rllntwotwo.m, rllntwotwo.n, rllntwotwo.alpha, A, rllntwotwo.lda, B, rllntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rllutwotwo.a );
	B = new Float64Array( rllutwotwo.b );

	expected = new Float64Array( rllutwotwo.expected );

	out = dtrsm( rllutwotwo.order, rllutwotwo.side, rllutwotwo.uplo, rllutwotwo.transa, rllutwotwo.diag, rllutwotwo.m, rllutwotwo.n, rllutwotwo.alpha, A, rllutwotwo.lda, B, rllutwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rlunntwotwo.a );
	B = new Float64Array( rlunntwotwo.b );

	expected = new Float64Array( rlunntwotwo.expected );

	out = dtrsm( rlunntwotwo.order, rlunntwotwo.side, rlunntwotwo.uplo, rlunntwotwo.transa, rlunntwotwo.diag, rlunntwotwo.m, rlunntwotwo.n, rlunntwotwo.alpha, A, rlunntwotwo.lda, B, rlunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rluutwotwo.a );
	B = new Float64Array( rluutwotwo.b );

	expected = new Float64Array( rluutwotwo.expected );

	out = dtrsm( rluutwotwo.order, rluutwotwo.side, rluutwotwo.uplo, rluutwotwo.transa, rluutwotwo.diag, rluutwotwo.m, rluutwotwo.n, rluutwotwo.alpha, A, rluutwotwo.lda, B, rluutwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rrlunntwotwo.a );
	B = new Float64Array( rrlunntwotwo.b );

	expected = new Float64Array( rrlunntwotwo.expected );

	out = dtrsm( rrlunntwotwo.order, rrlunntwotwo.side, rrlunntwotwo.uplo, rrlunntwotwo.transa, rrlunntwotwo.diag, rrlunntwotwo.m, rrlunntwotwo.n, rrlunntwotwo.alpha, A, rrlunntwotwo.lda, B, rrlunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rrunntwotwo.a );
	B = new Float64Array( rrunntwotwo.b );

	expected = new Float64Array( rrunntwotwo.expected );

	out = dtrsm( rrunntwotwo.order, rrunntwotwo.side, rrunntwotwo.uplo, rrunntwotwo.transa, rrunntwotwo.diag, rrunntwotwo.m, rrunntwotwo.n, rrunntwotwo.alpha, A, rrunntwotwo.lda, B, rrunntwotwo.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (column-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( cllnthreethree.a );
	B = new Float64Array( cllnthreethree.b );

	expected = new Float64Array( cllnthreethree.expected );

	out = dtrsm( cllnthreethree.order, cllnthreethree.side, cllnthreethree.uplo, cllnthreethree.transa, cllnthreethree.diag, cllnthreethree.m, cllnthreethree.n, cllnthreethree.alpha, A, cllnthreethree.lda, B, cllnthreethree.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 10.0 );

	t.end();
});

tape( 'the function solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit, or non-unit,  upper or lower triangular matrix  and  `op( A )`  is one  of `op( A) = A` or `op( A ) = A**T`. The matrix `X` is overwritten on `B` (row-major)', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( rllnthreethree.a );
	B = new Float64Array( rllnthreethree.b );

	expected = new Float64Array( rllnthreethree.expected );

	out = dtrsm( rllnthreethree.order, rllnthreethree.side, rllnthreethree.uplo, rllnthreethree.transa, rllnthreethree.diag, rllnthreethree.m, rllnthreethree.n, rllnthreethree.alpha, A, rllnthreethree.lda, B, rllnthreethree.ldb );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 10.0 );

	t.end();
});
