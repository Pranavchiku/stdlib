/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dtrsm = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 10, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( true, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( false, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( null, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( [], 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( {}, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( ( x: number ): number => x, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 10, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', true, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', false, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', null, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', [], 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', {}, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', ( x: number ): number => x, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 10, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', true, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', false, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', null, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', [], 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', {}, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', ( x: number ): number => x, 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 10, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', true, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', false, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', null, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', [], 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', {}, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', ( x: number ): number => x, 'non-unit', 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 10, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', true, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', false, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', null, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', [], 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', {}, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', ( x: number ): number => x, 2, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', '2', 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', true, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', false, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', null, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', [], 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', {}, 2, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', ( x: number ): number => x, 2, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, '2', 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, true, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, false, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, null, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, [], 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, {}, 6.0, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, ( x: number ): number => x, 6.0, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, '6.0', A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, true, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, false, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, null, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, [], A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, {}, A, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, ( x: number ): number => x, A, 2, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a Float64Array...
{
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, 2, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, true, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, false, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, null, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, [], B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, {}, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, ( x: number ): number => x, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, '2', B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, true, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, false, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, null, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, [], B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, {}, B, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, ( x: number ): number => x, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 2, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, true, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, false, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, null, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, [], 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, {}, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, ( x: number ): number => x, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, '2' ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, true ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, false ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, null ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, [] ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, {} ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm(); // $ExpectError
	dtrsm( 'row-major' ); // $ExpectError
	dtrsm( 'row-major', 'left' ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper' ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none' ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit' ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2 ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B ); // $ExpectError
	dtrsm( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, B, 2, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 10, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( true, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( false, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( null, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( [], 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( {}, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( ( x: number ): number => x, 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 10, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', true, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', false, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', null, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', [], 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', {}, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', ( x: number ): number => x, 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 10, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', true, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', false, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', null, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', [], 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', {}, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', ( x: number ): number => x, 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 10, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', true, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', false, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', null, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', [], 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', {}, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', ( x: number ): number => x, 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 10, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', true, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', false, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', null, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', [], 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', {}, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', ( x: number ): number => x, 2, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', '2', 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', true, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', false, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', null, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', [], 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', {}, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', ( x: number ): number => x, 2, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, '2', 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, true, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, false, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, null, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, [], 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, {}, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, ( x: number ): number => x, 6.0, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, '6.0', A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, true, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, false, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, null, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, [], A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, {}, A, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, ( x: number ): number => x, A, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a Float64Array...
{
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, 2, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, true, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, false, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, null, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, [], 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, {}, 2, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, ( x: number ): number => x, 2, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, '2', 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, true, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, false, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, null, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, [], 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, {}, 0, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, ( x: number ): number => x, 0, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a eleventh argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, '2', B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, true, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, false, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, null, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, [], B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, {}, B, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, ( x: number ): number => x, B, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, 2, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, true, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, false, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, null, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, [], 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, {}, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, ( x: number ): number => x, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a thirteenth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, '2', 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, true, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, false, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, null, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, [], 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, {}, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourteenth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, '2' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, true ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, false ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, null ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, [] ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, {} ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	const B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );

	dtrsm.ndarray(); // $ExpectError
	dtrsm.ndarray( 'row-major' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit' ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2 ); // $ExpectError
	dtrsm.ndarray( 'row-major', 'left', 'upper', 'none', 'non-unit', 2, 2, 6.0, A, 2, 0, B, 2, 0, 10 ); // $ExpectError
}
