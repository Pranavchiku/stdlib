/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var isTransposeOperation = require( '@stdlib/blas/base/assert/is-transpose-operation' );
var format = require( '@stdlib/string/format' );
var base = require( './base.js' );


// MAIN //

/**
* Performs one of the matrix-matrix operations `C := alpha * op( A ) * op( B )` using alternative indexing semantics where `op( X )` is one of `op( X ) = X` or `op( X ) = X ** T`, `alpha` and `beta` are scalars, and `A`, `B`, and `C` are matrices, with `op( A )` an `m` by `k` matrix, `op( B )` a `k` by `n` matrix, and `C` an `m` by `n` matrix.
*
* @param {string} order - storage layout of `A`, `B`, and `C`
* @param {string} transa - specifies the form of `op( A )` to be used in matrix multiplication
* @param {string} transb - specifies the form of `op( B )` to be used in matrix multiplication
* @param {NonNegativeInteger} m - number of rows in `op( A )` and `C`
* @param {NonNegativeInteger} n - number of columns in `op( B )` and `C`
* @param {NonNegativeInteger} k - number of columns in `op( A )` and rows in `op( B )`
* @param {number} alpha - scalar constant
* @param {Float64Array} A - input matrix
* @param {NonNegativeInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {NonNegativeInteger} offsetA - starting `A` index
* @param {Float64Array} B - input matrix
* @param {NonNegativeInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @param {NonNegativeInteger} offsetB - starting `B` index
* @param {number} beta - scalar constant
* @param {Float64Array} C - output matrix
* @param {NonNegativeInteger} LDC - stride of the first dimension of `C` (a.k.a., leading dimension of the matrix `C`)
* @param {NonNegativeInteger} offsetC - starting `C` index
* @throws {TypeError} first argument must be a valid order
* @throws {TypeError} second argument must be a valid transpose operation
* @throws {TypeError} third argument must be a valid transpose operation
* @returns {Float64Array} `C`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ] );
* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dgemm( 'row-major', 'none', 'none', 2, 3, 3, 5.0, A, 3, 0, B, 3, 0, 6.0, C, 3, 0 );
* // C => <Float64Array>[ 156.0, 192.0, 228.0, 354.0, 435.0, 516.0 ]
*/
function dgemm( order, transa, transb, m, n, k, alpha, A, LDA, offsetA, B, LDB, offsetB, beta, C, LDC, offsetC ) { // eslint-disable-line max-len, max-params
	if ( !isLayout( order ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );
	}
	if ( !isTransposeOperation( transa ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a valid transpose operation. Value: `%s`.', transa ) );
	}
	if ( !isTransposeOperation( transb ) ) {
		throw new TypeError( format( 'invalid argument. Third argument must be a valid transpose operation. Value: `%s`.', transb ) );
	}
	return base( order, transa, transb, m, n, k, alpha, A, LDA, offsetA, B, LDB, offsetB, beta, C, LDC, offsetC );
}


// EXPORTS //

module.exports = dgemm;
