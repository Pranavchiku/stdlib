/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* BLAS level 3 routine to perform one of the matrix-matrix operations `C := alpha * op( A ) * op( B )` where `op( X )` is one of `op( X ) = X` or `op( X ) = X ** T`, `alpha` and `beta` are scalars, and `A`, `B`, and `C` are matrices, with `op( A )` an `m` by `k` matrix, `op( B )` a `k` by `n` matrix, and `C` an `m` by `n` matrix.
*
* @module @stdlib/blas/base/dgemm
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dgemm = require( '@stdlib/blas/base/dgemm' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ] );
* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dgemm( 'row-major', 'none', 'none', 2, 3, 3, 5.0, A, 3, B, 3, 6.0, C, 3 );
* // C => <Float64Array>[ 156.0, 192.0, 228.0, 354.0, 435.0, 516.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dgemm = require( '@stdlib/blas/base/dgemm' );
*
* var A = new Float64Array( [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var B = new Float64Array( [ 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ] );
* var C = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dgemm.ndarray( 'row-major', 'none', 'none', 2, 3, 3, 5.0, A, 3, 1, B, 3, 2, 6.0, C, 3, 4 );
* // C => <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 156.0, 192.0, 228.0, 354.0, 435.0, 516.0 ]
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var isError = require( '@stdlib/assert/is-error' );
var main = require( './main.js' );


// MAIN //

var dgemm;
var tmp = tryRequire( join( __dirname, './native.js' ) );
if ( isError( tmp ) ) {
	dgemm = main;
} else {
	dgemm = tmp;
}


// EXPORTS //

module.exports = dgemm;

// exports: { "ndarray": "dgemm.ndarray" }
