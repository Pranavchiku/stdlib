/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Performs one of the matrix-matrix operations `C := alpha * op( A ) * op( B )` where `op( X )` is one of `op( X ) = X` or `op( X ) = X ** T`, `alpha` and `beta` are scalars, and `A`, `B`, and `C` are matrices, with `op( A )` an `m` by `k` matrix, `op( B )` a `k` by `n` matrix, and `C` an `m` by `n` matrix.
*
* @private
* @param {string} order - storage layout of `A`, `B`, and `C`
* @param {string} transa - specifies the form of `op( A )` to be used in matrix multiplication
* @param {string} transb - specifies the form of `op( B )` to be used in matrix multiplication
* @param {NonNegativeInteger} m - number of rows in `op( A )` and `C`
* @param {NonNegativeInteger} n - number of columns in `op( B )` and `C`
* @param {NonNegativeInteger} k - number of columns in `op( A )` and rows in `op( B )`
* @param {number} alpha - scalar constant
* @param {Float64Array} A - input matrix
* @param {NonNegativeInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {NonNegativeInteger} offsetA - starting `A` index
* @param {Float64Array} B - input matrix
* @param {NonNegativeInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @param {NonNegativeInteger} offsetB - starting `B` index
* @param {number} beta - scalar constant
* @param {Float64Array} C - output matrix
* @param {NonNegativeInteger} LDC - stride of the first dimension of `C` (a.k.a., leading dimension of the matrix `C`)
* @param {NonNegativeInteger} offsetC - starting `C` index
* @returns {Float64Array} `C`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0 ] );
* var C = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dgemm( 'row-major', 'none', 'none', 2, 3, 3, 5.0, A, 3, 0, B, 3, 0, 6.0, C, 3, 0 );
* // C => <Float64Array>[ 156.0, 192.0, 228.0, 354.0, 435.0, 516.0 ]
*/
function dgemm( order, transa, transb, m, n, k, alpha, A, LDA, offsetA, B, LDB, offsetB, beta, C, LDC, offsetC ) { // eslint-disable-line max-len, max-params
	var nota;
	var notb;
	var tmp;
	var i;
	var j;
	var l;

	nota = transa === 'none';
	notb = transb === 'none';

	if ( m === 0 || n === 0 || ( ( ( alpha === 0.0 || k === 0 ) ) && beta === 1.0 ) ) { // eslint-disable-line max-len
		return C;
	}

	if ( alpha === 0.0 ) {
		if ( beta === 0.0 ) {
			if ( order === 'column-major' ) {
				for ( j = 0; j < n; j++ ) {
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( j * LDC ) + i ] = 0.0;
					}
				}
				return C;
			}
			// order === 'row-major'
			for ( j = 0; j < n; j++ ) {
				for ( i = 0; i < m; i++ ) {
					C[ offsetC + ( i * LDC ) + j ] = 0.0;
				}
			}
			return C;
		}
		// beta !== 0.0
		if ( order === 'column-major' ) {
			for ( j = 0; j < n; j++ ) {
				for ( i = 0; i < m; i++ ) {
					C[ offsetC + ( j * LDC ) + i ] *= beta;
				}
			}
			return C;
		}
		// order === 'row-major'
		for ( j = 0; j < n; j++ ) {
			for ( i = 0; i < m; i++ ) {
				C[ offsetC + ( i * LDC ) + j ] *= beta;
			}
		}
		return C;
	}
	if ( notb ) {
		if ( nota ) {
			// C := alpha * A * B + beta * C
			if ( order === 'column-major' ) {
				for ( j = 0; j < n; j++ ) {
					if ( beta === 0.0 ) {
						for ( i = 0; i < m; i++ ) { // eslint-disable-line max-depth
							C[ offsetC + ( j * LDC ) + i ] = 0.0;
						}
					} else if ( beta !== 1.0 ) {
						for ( i = 0; i < m; i++ ) { // eslint-disable-line max-depth
							C[ offsetC + ( j * LDC ) + i ] *= beta;
						}
					}
					for ( l = 0; l < k; l++ ) {
						tmp = alpha * B[ offsetB + ( j * LDB ) + l ];
						for ( i = 0; i < m; i++ ) {
							C[ offsetC + ( j * LDC ) + i ] += tmp * A[ offsetA + ( l * LDA ) + i ]; // eslint-disable-line max-len
						}
					}
				}
				return C;
			}
			// order === 'row-major'
			for ( j = 0; j < n; j++ ) {
				if ( beta === 0.0 ) {
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( i * LDC ) + j ] = 0.0;
					}
				} else if ( beta !== 1.0 ) {
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( i * LDC ) + j ] *= beta;
					}
				}
				for ( l = 0; l < k; l++ ) {
					tmp = alpha * B[ offsetB + ( l * LDB ) + j ];
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( i * LDC ) + j ] += tmp * A[ offsetA + ( i * LDA ) + l ]; // eslint-disable-line max-len
					}
				}
			}
			return C;
		}
		// C := alpha * A ** T * B + beta * C
		if ( order === 'column-major' ) {
			for ( j = 0; j < n; j++ ) {
				for ( i = 0; i < m; i++ ) {
					tmp = 0.0;
					for ( l = 0; l < k; l++ ) {
						tmp += A[ offsetA + ( i * LDA ) + l ] * B[ offsetB + ( j * LDB ) + l ]; // eslint-disable-line max-len
					}
					if ( beta === 0.0 ) {
						C[ offsetC + ( j * LDC ) + i ] = alpha * tmp;
					} else {
						C[ offsetC + ( j * LDC ) + i ] = ( ( alpha * tmp ) + ( beta * C[ offsetC + ( j * LDC ) + i ] ) ); // eslint-disable-line max-len
					}
				}
			}
			return C;
		}
		// order === 'row-major'
		for ( j = 0; j < n; j++ ) {
			for ( i = 0; i < m; i++ ) {
				tmp = 0.0;
				for ( l = 0; l < k; l++ ) {
					tmp += A[ offsetA + ( l * LDA ) + i ] * B[ offsetB + ( l * LDB ) + j ]; // eslint-disable-line max-len
				}
				if ( beta === 0.0 ) {
					C[ offsetC + ( i * LDC ) + j ] = alpha * tmp;
				} else {
					C[ offsetC + ( i * LDC ) + j ] = ( ( alpha * tmp ) + ( beta * C[ offsetC + ( i * LDC ) + j ] ) ); // eslint-disable-line max-len
				}
			}
		}
		return C;
	}
	if ( nota ) {
		if ( order === 'column-major' ) {
			for ( j = 0; j < n; j++ ) {
				if ( beta === 0.0 ) {
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( j * LDC ) + i ] = 0.0;
					}
				} else if ( beta !== 1.0 ) {
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( j * LDC ) + i ] *= beta;
					}
				}
				for ( l = 0; l < k; l++ ) {
					tmp = alpha * B[ offsetB + ( l * LDB ) + j ];
					for ( i = 0; i < m; i++ ) {
						C[ offsetC + ( j * LDC ) + i ] += tmp * A[ offsetA + ( l * LDA ) + i ]; // eslint-disable-line max-len
					}
				}
			}
			return C;
		}
		// order === 'row-major'
		for ( j = 0; j < n; j++ ) {
			if ( beta === 0.0 ) {
				for ( i = 0; i < m; i++ ) {
					C[ offsetC + ( i * LDC ) + j ] = 0.0;
				}
			} else if ( beta !== 1.0 ) {
				for ( i = 0; i < m; i++ ) {
					C[ offsetC + ( i * LDC ) + j ] *= beta;
				}
			}
			for ( l = 0; l < k; l++ ) {
				tmp = alpha * B[ offsetB + ( j * LDB ) + l ];
				for ( i = 0; i < m; i++ ) {
					C[ offsetC + ( i * LDC ) + j ] += tmp * A[ offsetA + ( i * LDA ) + l ]; // eslint-disable-line max-len
				}
			}
		}
		return C;
	}
	// C :=  alpha * A ** T * B ** T + beta * C
	if ( order === 'column-major' ) {
		for ( j = 0; j < n; j++ ) {
			for ( i = 0; i < m; i++ ) {
				tmp = 0.0;
				for ( l = 0; l < k; l++ ) {
					tmp += A[ offsetA + ( i * LDA ) + l ] * B[ offsetB + ( l * LDB ) + j ]; // eslint-disable-line max-len
				}
				if ( beta === 0.0 ) {
					C[ offsetC + ( j * LDC ) + i ] = alpha * tmp;
				} else {
					C[ offsetC + ( j * LDC ) + i ] = ( ( alpha * tmp ) + ( beta * C[ offsetC + ( j * LDC ) + i ] ) ); // eslint-disable-line max-len
				}
			}
		}
		return C;
	}
	// order === 'row-major'
	for ( j = 0; j < n; j++ ) {
		for ( i = 0; i < m; i++ ) {
			tmp = 0.0;
			for ( l = 0; l < k; l++ ) {
				tmp += A[ offsetA + ( l * LDA ) + i ] * B[ offsetB + ( j * LDB ) + l ]; // eslint-disable-line max-len
			}
			if ( beta === 0.0 ) {
				C[ offsetC + ( i * LDC ) + j ] = alpha * tmp;
			} else {
				C[ offsetC + ( i * LDC ) + j ] = ( ( alpha * tmp ) + ( beta * C[ offsetC + ( i * LDC ) + j ] ) ); // eslint-disable-line max-len
			}
		}
	}
}


// EXPORTS //

module.exports = dgemm;
