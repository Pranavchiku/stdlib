/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );


// MAIN //

/**
* Performs a series of row interchanges on the matrix `A`.
*
* @param {PositiveInteger} N - number of columns of `A`
* @param {Array} A - matrix
* @param {PositiveInteger} LDA - leading dimension of `A`
* @param {PositiveInteger} k1 - first element of `IPIV` for which a row interchange will be done
* @param {PositiveInteger} k2 - second element of `IPIV` for which a row interchange will be done
* @param {Array} IPIV - vector of pivot indices
* @param {PositiveInteger} incX - increment between successive values of `IPIV`
* @returns {Float64Array} permuted matrix `A`
*
* @example
* TODO:
*/
function dlaswp( order, N, A, LDA, k1, k2, IPIV, incX ) {
	var IPIV;
	var incX;
	var inc;
	var ix0;
	var LDA;
	var n32;
	var tmp;
	var i2;
	var ip;
	var ix;
	var k1;
	var k2;
	var i1;
	var A;
	var i;
	var j;
	var k;
	var N;

	if ( !isLayout( order ) ) {
		throw new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );
	}

	// Interchange row I with IPIV( k1 + ( I - k1 ) * abs( incX ) ) for
	// each rows k1 through k2.
	if ( incX > 0 ) {
		ix0 = k1;
		i1 = k1;
		i2 = k2;
		inc = 1;
	} else if ( incX < 0 ) {
		ix0 = k1 + ( k1 - k2 ) * incX;
		i1 = k2;
		i2 = k1;
		inc = -1;
	} else {
		return;
	}

	n32 = ( N / 32 ) * 32;
	if ( n32 != 0 ) {
		for ( j = 0; j < n32; j += 32 ) {
			ix = ix0;
			for ( i = i1 - 1; i < i2; i += inc ) {
				ip = IPIV[ ix - 1 ];
				if ( ip != i ) {
					for ( k = j; k <= j + 31; k++ ) {
						if ( order == 'row-major' ) {
							tmp = A[ i * LDA + k ];
							A[ i * LDA + k ] = A[ ip * LDA + k ];
							A[ ip * LDA + k ] = tmp;
						} else {
							tmp = A[ k * LDA + i ];
							A[ k * LDA + i ] = A[ k * LDA + ip ];
							A[ k * LDA + ip ] = tmp;
						}
					}
				}
				ix += incX;
			}
		}
	}
	if ( n32 != N ) {
		n32 += 1;
		ix = ix0;
		for ( i = i1 - 1; i < i2; i += inc ) {
			ip = IPIV[ ix - 1 ];
			if ( ip != i ) {
				for ( k = n32 - 1 ; k < N; k++ ) {
					if ( order == 'row-major' ) {
						tmp = A[ i * LDA + k ];
						A[ i * LDA + k ] = A[ ip * LDA + k ];
						A[ ip * LDA + k ] = tmp;
					} else {
						tmp = A[ k * LDA + i ];
						A[ k * LDA + i ] = A[ k * LDA + ip ];
						A[ k * LDA + ip ] = tmp;
					}
				}
			}
			ix += incX;
		}
	}
	return A;
}


// EXPORTS //

module.exports = dlaswp;
