/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var dscal = require( '@stdlib/blas/base/dscal' );


// MAIN //

/**
* Solves a tridiagonal system of the form `A * X = B` using `L * D * L ** T` factorization of `A`.
*
* @private
* @param {string} order - storage layout
* @param {NonNegativeInteger} N - order of tridiagonal matrix `A`
* @param {NonNegativeInteger} NRHS - number of right hand sides i.e. number of columns in matrix `B`
* @param {Float64Array} D - array containing the diagonal elements of `A`
* @param {integer} strideD - stride length for `D`
* @param {integer} offsetD - starting index for `D`
* @param {Float64Array} E - array containing the subdiagonal elements of `A`
* @param {integer} strideE - stride length for `E`
* @param {integer} offsetE - starting index for `E`
* @param {Float64Array} B - input matrix
* @param {integer} strideB1 - stride of the first dimension of `B`
* @param {integer} strideB2 - stride of the second dimension of `B`
* @param {integer} offsetB - index offset for `B`
* @returns {Float64Array} output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var E = new Float64Array( [ 2.0, 3.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dptts2( 'row-major', 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 );
* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
*/
function dptts2( order, N, NRHS, D, strideD, offsetD, E, strideE, offsetE, B, strideB1, strideB2, offsetB ) { // eslint-disable-line max-len, max-params
	var sb0;
	var sb1;
	var ob;
	var se;
	var i;
	var j;

	if ( order === 'row-major' ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		sb0 = strideB2; // stride for innermost loop
		sb1 = strideB1; // stride for outermost loop
	} else { // order == 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		sb0 = strideB1; // stride for innermost loop
		sb1 = strideB2; // stride for outermost loop
	}

	if ( N <= 1 ) {
		if ( N === 1 ) {
			if ( order === 'column-major' ) {
				dscal( NRHS, 1.0 / D[ 0 ], B, strideB2 );
				return B;
			}
			// order === 'row-major'
			dscal( NRHS, 1.0 / D[ 0 ], B, strideB1 );
		}
		return B;
	}
	if ( order === 'column-major' ) {
		for ( j = 0; j < NRHS; j++ ) {
			ob = offsetB + ( j * sb1 );
			se = 1;
			for ( i = 1; i < N; i++ ) {
				B[ ob + ( i * sb0 ) ] -= E[ offsetE + se - 1 ] * B[ ob + ( ( i - 1 ) * sb0 ) ]; // eslint-disable-line max-len
				se += strideE;
			}
			B[ ob + ( ( N - 1 ) * sb0 ) ] /= D[ offsetD + ( ( N - 1 ) * strideD ) ]; // eslint-disable-line max-len
			se = N - 2;
			for ( i = N - 2; i >= 0; i-- ) {
				B[ ob + ( i * sb0 ) ] = ( B[ ob + ( i * sb0 ) ] / D[ offsetD + ( i * strideD ) ] ) - ( E[ offsetE + se ] * B[ ob + ( ( i + 1) * sb0 ) ] ); // eslint-disable-line max-len
				se -= strideE;
			}
		}
		return B;
	}
	// order === 'row-major'
	for ( j = 0; j < NRHS; j++ ) {
		ob = offsetB + ( j * sb0 );
		se = 1;
		for ( i = 1; i < N; i++ ) {
			B[ ob + ( i * sb1 ) ] -= E[ offsetE + se - 1 ] * B[ ob + ( ( i - 1 ) * sb1 ) ]; // eslint-disable-line max-len
			se += strideE;
		}
		B[ ob + ( ( N - 1 ) * sb1 ) ] /= D[ offsetD + ( ( N - 1 ) * strideD ) ];
		se = N - 2;
		for ( i = N - 2; i >= 0; i-- ) {
			B[ ob + ( i * sb1 ) ] = ( B[ ob + ( i * sb1 ) ] / D[ offsetD + ( i * strideD ) ] ) - ( E[ offsetE + se ] * B[ ob + ( ( i + 1 ) * sb1 ) ] ); // eslint-disable-line max-len
			se -= strideE;
		}
	}
	return B;
}


// EXPORTS //

module.exports = dptts2;
