/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Returns the values `scale_out` and `sumsq_out` such that `(scale_out**2)*sumsq_out = x( 1 )**2 +...+ x( n )**2 + (scale**2)*sumsq` where `x( i ) = X( 1 + ( i - 1 )*INCX )`.
*
* @param {NonNegativeInteger} N - number of elements to be used from `X`
* @param {Float64Array} X - input array
* @param {integer} incX - stride length for `X`
* @param {number} scale - scaling factor for the sum of squares
* @param {number} sumsq - basic sum of squares from which output is factored out
* @param {Float64Array} out - array containing `scale_out` and `sumsq_out`
* @returns {Float64Array} out
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( [ 0.0, 0.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
*
* var out = dlassq( 4, X, 1, 1, 0, out );
* // out => <Float64Array>[ 1.0, 30.0 ]
*/
function dlassq( N, X, incX, scale, sumsq, out ) {
	return base( N, X, incX, 0, scale, sumsq, out, 1, 0 );
}


// EXPORTS //

module.exports = dlassq;
