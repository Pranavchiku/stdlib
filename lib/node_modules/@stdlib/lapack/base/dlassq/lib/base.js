/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var pow = require( '@stdlib/math/base/special/pow' );
var abs = require( '@stdlib/math/base/special/abs' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// VARIABLES //

var SBIG = 1.11137937474253874e-162;
var SSML = 4.49891379454319638e+161;
var TBIG = 1.99791907220223503e+146;
var TSML = 1.49166814624004135e-154;


// MAIN //

/**
* Returns the values `scale_out` and `sumsq_out` such that `(scale_out**2)*sumsq_out = x( 1 )**2 +...+ x( n )**2 + (scale**2)*sumsq` where `x( i ) = X( 1 + ( i - 1 )*INCX )`.
*
* @private
* @param {NonNegativeInteger} N - number of elements to be used from `x`
* @param {Float64Array} X - input array
* @param {integer} strideX - stride length for `X`
* @param {NonNegativeInteger} offsetX - starting index for `X`
* @param {number} scale - scaling factor for the sum of squares
* @param {number} sumsq - basic sum of squares from which output is factored out
* @param {Float64Array} out - output array containing scale `scale_out` and `sumsq_out`
* @param {integer} strideOut - stride length for `out`
* @param {NonNegativeInteger} offsetOut - starting index for `out`
* @returns {Float64Array} out
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( [ 0.0, 0.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
*
* dlassq( 4, X, 1, 0, 1, 0, out, 1, 0 );
* // out => <Float64Array>[ 1.0, 30.0 ]
*/
function dlassq( N, X, strideX, offsetX, scale, sumsq, out, strideOut, offsetOut ) { // eslint-disable-line max-len
	var notbig;
	var abig;
	var asml;
	var amed;
	var ymin;
	var ymax;
	var ax;
	var ox;
	var i;

	if ( sumsq === 0.0 ) {
		scale = 1.0;
	}
	if ( scale === 0.0 ) {
		scale = 1.0;
		sumsq = 0.0;
	}
	if ( N <= 0 ) {
		out[ offsetOut ] = scale;
		out[ offsetOut + strideOut ] = sumsq;
		return out;
	}
	notbig = true;
	asml = 0.0;
	amed = 0.0;
	abig = 0.0;
	ox = offsetX;
	if ( strideX < 0 ) {
		ox -= ( N - 1 ) * strideX;
	}
	for ( i = 0; i < N; i++ ) {
		ax = abs( X[ ox ] );
		if ( ax > TBIG ) {
			abig += pow( ( ax * SBIG ), 2 );
			notbig = false;
		} else if ( ax < TSML ) {
			if ( notbig ) {
				asml += +pow( ( ax * SSML ), 2 );
			}
		} else {
			amed += pow( ax, 2 );
		}
		ox += strideX;
	}
	// Put the existing sum of squares into one of the accumulators
	if ( sumsq > 0.0 ) {
		ax = scale * sqrt( sumsq );
		if ( ax > TBIG ) {
			if ( scale > 1.0 ) {
				scale *= SBIG;
				abig += scale * ( scale * sumsq );
			} else {
				abig += scale * ( scale * ( SBIG * ( SBIG * sumsq ) ) );
			}
		} else if ( ax < TSML ) {
			if ( notbig ) {
				if ( scale < 1.0 ) {
					scale *= SSML;
					asml += scale * ( scale * sumsq );
				} else {
					asml += scale * ( scale * ( SSML * ( SSML * sumsq ) ) );
				}
			}
		} else {
			amed += scale * ( scale * sumsq );
		}
	}
	// Combine abig and amed or amed and asml if more than one accumulator was used.
	if ( abig > 0.0 ) {
		// Combine abig and amed if abig > 0.
		if ( amed > 0.0 ) {
			abig += ( amed * SBIG ) * SBIG;
		}
		scale = 1.0 / SBIG;
		sumsq = abig;
	} else if ( asml > 0.0 ) {
		if ( amed > 0.0 ) {
			amed = sqrt( amed );
			asml = sqrt( asml ) / SSML;
			if ( asml > amed ) {
				ymin = amed;
				ymax = asml;
			} else {
				ymin = asml;
				ymax = amed;
			}
			scale = 1.0;
			sumsq = pow( ymax, 2 ) * ( 1.0 + pow( ymin / ymax, 2 ) );
		} else {
			scale = 1.0 / SSML;
			sumsq = asml;
		}
	}
	// Otherwise all values are mid-range or zero
	scale = 1.0;
	sumsq = amed;
	out[ offsetOut ] = scale;
	out[ offsetOut + strideOut ] = sumsq;
	return out;
}


// EXPORTS //

module.exports = dlassq;
