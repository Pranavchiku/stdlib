/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var dlassq = require( '@stdlib/lapack/base/dlassq' ).ndarray;
var lowercase = require( '@stdlib/string/base/lowercase' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var Float64Array = require( '@stdlib/array/float64' );
var abs = require( '@stdlib/math/base/special/abs' );
var min = require( '@stdlib/math/base/special/min' );
var isnan = require( '@stdlib/assert/is-nan' );


// MAIN //

/**
* Returns the value of one norm, or the Frobenius norm, or the infinity norm, or the element of largest absolute value of a real matrix `A`.
*
* @private
* @param {string} norm - specifies the value to be returned
* @param {NonNegativeInteger} M - number of rows of `A`
* @param {NonNegativeInteger} N - number of columns of `A`
* @param {Float64Array} A - input array
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {PositiveInteger} offsetA - starting index for `A`
* @param {Float64Array} work - workspace array
* @param {integer} strideW - stride length for `work`
* @param {PositiveInteger} offsetW - starting index for `work`
* @returns {number} matrix norm
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var work = new Float64Array( 2 );
*
* var out = dlange( 'M', 2, 2, A, 2, 1, 0, work, 1, 0 );
* // returns 4.0
*/
function dlange( norm, M, N, A, strideA1, strideA2, offsetA, work, strideW, offsetW ) {
	var order;
	var value;
	var sum;
	var tmp;
	var out;
	var sa0;
	var sa1;
	var sa;
	var i;
	var j;

	norm = lowercase( norm );

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		order = 'row-major';
		sa0 = strideA2; // stride for innermost loop
		sa1 = strideA1; // stride for outermost loop
	} else { // order == 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		order = 'column-major';
		sa0 = strideA1;
		sa1 = strideA2;
	}

	if ( min( M, N ) === 0.0 ) {
		value = 0.0;
	} else if ( norm === 'm' ) {
		// Find max( abs( A[ i, j ] ) )
		value = 0.0;
		if ( order === 'column-major' ) {
			for ( j = 0; j < N; j++ ) {
				sa = offsetA + ( j * sa0 );
				for ( i = 0; i < M; i++ ) {
					tmp = abs( A[ sa + ( i * sa1 ) ] );
					if ( value <= tmp || isnan( tmp ) ) {
						value = tmp;
					}
				}
			}
			return value;
		}
		// order === 'row-major'
		for ( j = 0; j < M; j++ ) {
			sa = offsetA + ( j * sa1 );
			for ( i = 0; i < N; i++ ) {
				tmp = abs( A[ sa + ( i * sa0 ) ] );
				if ( value <= tmp || isnan( tmp ) ) {
					value = tmp;
				}
			}
		}
		return value;
	}
	if ( norm === 'o' || norm === '1' ) {
		// Find norm1( A )
		value = 0.0;
		if ( order === 'column-major' ) {
			for ( j = 0; j < N; j++ ) {
				sum = 0.0;
				sa = offsetA + ( j * sa1 );
				for ( i = 0; i < M; i++ ) {
					sum += abs( A[ sa + ( i * sa0 ) ] );
				}
				if ( value < sum || isnan( sum ) ) {
					value = sum;
				}
			}
			return value;
		}
		// order === 'row-major'
		// For computing one norm, first dimension has the fastest changing index...
		sa0 = strideA1;
		sa1 = strideA2;
		for ( j = 0; j < N; j++ ) {
			sum = 0.0;
			sa = offsetA + ( j * sa1 );
			for ( i = 0; i < M; i++ ) {
				sum += abs( A[ sa + ( i * sa0 ) ] );
			}
			if ( value < sum || isnan( sum ) ) {
				value = sum;
			}
		}
		return value;
	}
	if ( norm === 'i' ) {
		// Find normI( A )
		for ( i = 0; i < M; i++ ) {
			work[ offsetW + ( i * strideW ) ] = 0.0;
		}
		if ( order === 'column-major' ) {
			for ( j = 0; j < N; j++ ) {
				sa = offsetA + ( j * sa1 );
				for ( i = 0; i < M; i++ ) {
					work[ offsetW + ( i * strideW ) ] += abs( A[ sa + ( i * sa0 ) ] );
				}
			}
		} else { // order === 'row-major'
			// For computing infinity norm, first dimension has the fastest changing index...
			sa0 = strideA1;
			sa1 = strideA2;
			for ( j = 0; j < N; j++ ) {
				sa = offsetA + ( j * sa1 );
				for ( i = 0; i < M; i++ ) {
					work[ offsetW + ( i * strideW ) ] += abs( A[ sa + ( i * sa0 ) ] );
				}
			}
		}
		value = 0.0;
		for ( i = 0; i < M; i++ ) {
			tmp = work[ offsetW + ( i * strideW ) ];
			if ( value < tmp || isnan( tmp ) ) {
				value = tmp;
			}
		}
		return value;
	}
	if ( norm === 'f' ) {
		// Find normF( A )
		out = new Float64Array( [ 0.0, 1.0 ] );
		if ( order === 'column-major' ) {
			for ( j = 0; j < N; j++ ) {
				out = dlassq( M, A, sa0, offsetA + ( j * sa1 ), out[ 0 ], out[ 1 ], out, 1, 0 );
			}
			value = out[ 0 ] * sqrt( out[ 1 ] );
			return value;
		}
		// order === 'row-major'
		for ( j = 0; j < N; j++ ) {
			out = dlassq( M, A, sa1, offsetA + ( j * sa0 ), out[ 0 ], out[ 1 ], out, 1, 0 );
		}
		value = out[ 0 ] * sqrt( out[ 1 ] );
		return value;
	}
	return value;
}


// EXPORTS //

module.exports = dlange;
