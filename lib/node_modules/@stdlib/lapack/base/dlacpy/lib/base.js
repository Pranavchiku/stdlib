/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var min = require( '@stdlib/math/base/special/min' );


// MAIN //

/**
* Copies all or part of a two-dimensional matrix `A` to another matrix `B`.
*
* @private
* @param {string} order - storage layout of `A` and `B`
* @param {string} uplo - specifies whether the upper or lower triangular part of matrix `A` is supplied
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {PositiveInteger} offsetA - starting index for `A`
* @param {Float64Array} B - destination matrix
* @param {integer} strideB1 - stride of the first dimension of `B`
* @param {integer} strideB2 - stride of the second dimension of `B`
* @param {PositiveInteger} offsetB - starting index for `B`
* @returns {Float64Array} `B`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var B = new Float64Array( 4 );
*
* dlacpy( 'row-major', 'all', 2, 2, A, 2, 1, 0, B, 2, 1, 0 );
* // B => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]
*/
function dlacpy( order, uplo, M, N, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) { // eslint-disable-line max-len, max-params
	var sa0;
	var sa1;
	var sb0;
	var sb1;
	var oa;
	var ob;
	var i0;
	var i1;

	if ( order === 'row-major' ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		sa0 = strideA2; // stride for innermost loop
		sa1 = strideA1; // stride for outermost loop
		sb0 = strideB2; // stride for innermost loop
		sb1 = strideB1; // stride for outermost loop
	} else { // order === 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		sa0 = strideA1; // stride for innermost loop
		sa1 = strideA2; // stride for outermost loop
		sb0 = strideB1; // stride for innermost loop
		sb1 = strideB2; // stride for outermost loop
	}

	if ( uplo === 'upper' ) {
		if ( order === 'column-major' ) {
			for ( i1 = 0; i1 < N; i1++ ) {
				oa = offsetA + ( i1 * sa1 );
				ob = offsetB + ( i1 * sb1 );
				for ( i0 = 0; i0 < min( i1, M ); i0++ ) {
					B[ ob + ( i0 * sb0 ) ] = A[ oa + ( i0 * sa0 ) ];
				}
			}
			return B;
		}
		// order === 'row-major'
		for ( i1 = 0; i1 < N; i1++ ) {
			oa = offsetA + ( i1 * sa0 );
			ob = offsetB + ( i1 * sb0 );
			for ( i0 = 0; i0 < min( i1, M ); i0++ ) {
				B[ ob + ( i0 * sb1 ) ] = A[ oa + ( i0 * sa1 ) ];
			}
		}
		return B;
	}
	if ( uplo === 'lower' ) {
		if ( order === 'column-major' ) {
			for ( i1 = 0; i1 < N; i1++ ) {
				oa = offsetA + ( i1 * sa1 );
				ob = offsetB + ( i1 * sb1 );
				for ( i0 = i1; i0 < M; i0++ ) {
					B[ ob + ( i0 * sb0 ) ] = A[ oa + ( i0 * sa0 ) ];
				}
			}
			return B;
		}
		// order === 'row-major'
		for ( i1 = 0; i1 < N; i1++ ) {
			oa = offsetA + ( i1 * sa0 );
			ob = offsetB + ( i1 * sb0 );
			for ( i0 = i1; i0 < M; i0++ ) {
				B[ ob + ( i0 * sb1 ) ] = A[ oa + ( i0 * sa1 ) ];
			}
		}
		return B;
	}
	// All of the matrix `A`
	if ( order === 'column-major' ) {
		for ( i1 = 0; i1 < N; i1++ ) {
			oa = offsetA + ( i1 * sa1 );
			ob = offsetB + ( i1 * sb1 );
			for ( i0 = 0; i0 < M; i0++ ) {
				B[ ob + ( i0 * sb0 ) ] = A[ oa + ( i0 * sa0 ) ];
			}
		}
		return B;
	}
	// order === 'row-major'
	for ( i1 = 0; i1 < N; i1++ ) {
		oa = offsetA + ( i1 * sa0 );
		ob = offsetB + ( i1 * sb0 );
		for ( i0 = 0; i0 < M; i0++ ) {
			B[ ob + ( i0 * sb1 ) ] = A[ oa + ( i0 * sa1 ) ];
		}
	}
	return B;
}


// EXPORTS //

module.exports = dlacpy;
