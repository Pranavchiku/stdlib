
{{alias}}( order, uplo, M, N, A, LDA, B, LDB )
    Copies all or part of a two-dimensional matrix `A` to another matrix `B`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied.

    M: integer
        Number of row in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    B: Float64Array
        Output matrix `B`.

    LDB: integer
        Stride of the first dimension of `B` (a.k.a., leading dimension of the
        matrix `B`).

    Returns
    -------
    B: Float64Array
        Output matrix.

    Examples
    --------
    // Standard usage:
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 3.0, 0.0, 4.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 5.0, 7.0, 0.0, 8.0 ] );
    > {{alias}}( 'row-major', 'all', 2, 2, A, 2, B, 2 )
    <Float64Array>[ 1.0, 3.0, 0.0, 4.0 ]

    // Using typed array views:
    > var A0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 3.0, 0.0, 4.0 ] );
    > var B0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 5.0, 7.0, 0.0, 8.0 ] );
    > var A1 = new {{alias:@stdlib/array/float64}}( A0.buffer, A0.BYTES_PER_ELEMENT*1 );
    > var B1 = new {{alias:@stdlib/array/float64}}( B0.buffer, B0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( 'row-major', 'all', 2, 2, A1, 2, B1, 2 );
    > B0
    <Float64Array>[ 0.0, 1.0, 3.0, 0.0, 4.0 ]


{{alias}}.ndarray( order, uplo, M, N, A, sa1, sa2, oa, B, sb1, sb2, ob )
    Copies all or part of a two-dimensional matrix `A` to another matrix `B`
    using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied.

    M: integer
        Number of row in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    B: Float64Array
        Output matrix `B`.

    sb1: integer
        Stride of the first dimension of `B`.

    sb2: integer
        Stride of the second dimension of `B`.

    ob: integer
        Starting index for `B`.

    Returns
    -------
    B: Float64Array
        Output matrix.

    Examples
    --------
    // Standard usage:
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 3.0, 0.0, 4.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 5.0, 7.0, 0.0, 8.0 ] );
    > {{alias}}.ndarray( 'row-major', 'all', 2, 2, A, 2, 1, 0, B, 2, 1, 0 )
    <Float64Array>[ 1.0, 3.0, 0.0, 4.0 ]

    // Advanced indexing:
    > A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 3.0, 0.0, 4.0 ] );
    > B = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );
    > {{alias}}.ndarray( 'row-major', 'all', 2, 2, A, 2, 1, 1, B, 2, 1, 2 )
    <Float64Array>[ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ]

    See Also
    --------
