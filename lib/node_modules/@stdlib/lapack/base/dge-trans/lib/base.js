/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );


// MAIN //

/**
* Converts input general matrix from row-major to column-major layout or vice versa.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @param {Float64Array} out - output matrix
* @param {integer} strideO1 - stride of the first dimension of `out`
* @param {integer} strideO2 - stride of the second dimension of `out`
* @param {NonNegativeInteger} offsetO - starting index for `out`
* @returns {Float64Array} `out`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var out = new Float64Array( 6 );
*
* out = dgetrans( 2, 3, A, 3, 1, 0, out, 2, 1, 0 );
* // return <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]
*/
function dgetrans( M, N, A, strideA1, strideA2, offsetA, out, strideO1, strideO2, offsetO ) {
	var tmp;
	var ia;
	var io;
	var i;
	var j;
	var m;
	var n;

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		m = M;
		n = N;
	} else {
		m = N;
		n = M;
		tmp = strideA1;
		strideA1 = strideA2;
		strideA2 = tmp;
	}

	for ( i = 0; i < n; i++ ) {
		ia = offsetA + ( i * strideA2 );
		io = offsetO + ( i * strideO1 );
		for ( j = 0; j < m; j++ ) {
			out[ io + ( j * strideO2 ) ] = A[ ia + ( j * strideA1 ) ];
		}
	}
	return out;
}


// EXPORTS //

module.exports = dgetrans;
