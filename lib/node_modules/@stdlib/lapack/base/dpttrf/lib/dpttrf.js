/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Compute the `L * D * L^T` factorization of real symmetric positive definite tridiagonal matrix `A`.
*
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} D - the `N` diagonal elements of `A`
* @param {Float64Array} E - the `N-1` subdiagonal elements of `A`
* @param {integer} info - status code, `0` if successful, `<0` if i-th argument had an illegal value, `>0` if leading principal minor of order `i` is not positive; if `<N` then factorization could not be completed, if `>N` then the factorization was completed, but `D(N) <= 0`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var N = 3;
* var info = 0;
* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
* var E = new Float64Array( [ 1.0, 2.0 ] );
*
* dpttrf( N, D, E, info );
* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
* // E => <Float64Array>[ 0.25, ~0.4210 ]
*/
function dpttrf( N, D, E, info ) {
	return base( N, D, 1, 0, E, 1, 0, info );
}


// EXPORTS //

module.exports = dpttrf;
