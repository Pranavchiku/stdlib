/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the `L * D * L^T` factorization of real symmetric positive definite tridiagonal matrix `A`.
*
* @private
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} D - the `N` diagonal elements of `A`
* @param {integer} strideD - stride length for `D`
* @param {NonNegativeInteger} offsetD - starting index of `D`
* @param {Float64Array} E - the `N-1` subdiagonal elements of `A`
* @param {integer} strideE - stride length for `E`
* @param {NonNegativeInteger} offsetE - starting index of `E`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var N = 3;
* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
* var E = new Float64Array( [ 1.0, 2.0 ] );
*
* dpttrf( N, D, 1, 0, E, 1, 0 );
* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
* // E => <Float64Array>[ 0.25, ~0.4210 ]
*/
function dpttrf( N, D, strideD, offsetD, E, strideE, offsetE ) {
	var info;
	var ei;
	var sd;
	var se;
	var i;

	if ( N <= 0 ) {
		return 0;
	}

	// Compute the `L * D * L^T` factorization of `A`
	se = 0;
	sd = 0;
	for ( i = 0; i < N - 1; i++ ) {
		// Drop out of loop if `D[ offsetD + j ]` is not positive definite
		if ( D[ offsetD + sd ] <= 0.0 ) {
			info = offsetD + sd;
			return info;
		}

		ei = E[ offsetE + se ];
		E[ offsetE + se ] = ei / D[ offsetD + sd ];
		D[ offsetD + sd + strideD ] -= E[ offsetE + se ] * ei;
		se += strideE;
		sd += strideD;
	}
	// Check `D[ N - 1 ]` for positive definiteness
	if ( D[ offsetD + ( ( N - 1 ) * strideD ) ] <= 0.0 ) {
		info = ( N - 1 ) * sd;
		return info;
	}
	return 0;
}


// EXPORTS //

module.exports = dpttrf;
