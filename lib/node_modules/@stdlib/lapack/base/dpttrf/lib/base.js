/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the `L * D * L ** T` factorization of real symmetric positive definite tridiagonal matrix `A`.
*
* @private
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} D - the N diagonal elements of `A`
* @param {integer} strideD - `D` stride length
* @param {NonNegativeInteger} offsetD - starting index of `D`
* @param {Float64Array} E - the ( N-1 ) subdiagonal elements of `A`
* @param {integer} strideE - `E` stride length
* @param {NonNegativeInteger} offsetE - starting index of `E`
* @param {integer} info - status code, `0` if successful, `<0` if i-th argument had an illegal value, `>0` if leading principal minor of order `i` is not positive; if `<N` then factorization could not be completed, if `>N` then the factorization was completed, but `D(N) <= 0`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var N = 3;
* var info = 0;
* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
* var E = new Float64Array( [ 1.0, 2.0 ] );
*
* dpttrf( N, D, 1, 0, E, 1, 0, info );
* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
* // E => <Float64Array>[ 0.25, ~0.4210 ]
*/
function dpttrf( N, D, strideD, offsetD, E, strideE, offsetE, info ) {
	var i4;
	var ei;
	var i;
	var j;
	var k;

	// Quick return if possible
	if ( N <= 0 ) {
		return 0;
	}
	// Compute the `L * D * L**T` factorization of `A`
	i4 = ( N - 1 ) % 4;
	for ( k = 0, i = k, j = k; k < i4; i += strideE, j += strideD, k++ ) {
		if ( D[ offsetD + j ] <= 0.0 ) {
			info = k;
			return info;
		}
		ei = E[ offsetE + i ];
		E[ offsetE + i ] = ei / D[ offsetD + j ];
		D[ offsetD + j + 1 ] -= E[ offsetE + i ] * ei;
	}
	for ( k = i4, i = k, j = k; k < N - 4; k += 4, i += 4 * strideE, j += 4 * strideD ) { // eslint-disable-line max-len
		// Drop out of loop if `D[ offsetD + j ]` is not positive definite
		if ( D[ offsetD + j ] <= 0.0 ) {
			info = k;
			return info;
		}
		// Solve for `E[ offsetE + i ]` and `D[ offsetD + j + 1 ]`
		ei = E[ offsetE + i ];
		E[ offsetE + i ] = ei / D[ offsetD + j ];
		D[ offsetD + j + 1 ] -= E[ offsetE + i ] * ei;

		if ( D[ offsetD + j + 1 ] <= 0.0 ) {
			info = k + 1;
			return info;
		}
		// Solve for `E[ offsetE + i + 1 ]` and `D[ offsetD + j + 2 ]`
		ei = E[ offsetE + i + 1 ];
		E[ offsetE + i + 1 ] = ei / D[ offsetD + j + 1 ];
		D[ offsetD + j + 2 ] -= E[ offsetE + i + 1 ] * ei;

		if ( D[ offsetD + j + 2 ] <= 0.0 ) {
			info = k + 2;
			return info;
		}
		// Solve for `E[ offsetE + i + 2 ]` and `D[ offsetD + j + 3 ]`
		ei = E[ offsetE + i + 2 ];
		E[ offsetE + i + 2 ] = ei / D[ offsetD + j + 2 ];
		D[ offsetD + j + 3 ] -= E[ offsetE + i + 2 ] * ei;

		if ( D[ offsetD + j + 3 ] <= 0.0 ) {
			info = k + 3;
			return info;
		}
		// Solve for `E[ offsetE + i + 3 ]` and `D[ offsetD + j + 4 ]`
		ei = E[ offsetE + i + 3 ];
		E[ offsetE + i + 3 ] = ei / D[ offsetD + j + 3 ];
		D[ offsetD + j + 4 ] -= E[ offsetE + i + 3 ] * ei;
	}
	// Check `D[ N - 1 ]` for positive definiteness
	if ( D[ offsetD + N - 1 ] <= 0.0 ) {
		info = N - 1;
		return info;
	}
	return info;
}


// EXPORTS //

module.exports = dpttrf;
