
{{alias}}( N, D, E, info )
    Computes the `L * D * L ** T` factorization of real symmetric positive
    definite tridiagonal matrix `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------

    N: integer
        Order of matrix `A`.

    D: Float64Array
        Diagonal elements of `A`.

    E: Float64Array
        Subdiagonal elements of `A`.

    info: integer
        Status code.

    Returns
    -------
    info: integer
        Status code.

    Examples
    --------
    > var N = 3;
    > var info = 0;
    > var D = new {{alias:@stdlib/array/float64}}( [ 4.0, 5.0, 6.0 ] );
    > var E = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0 ] );
    > {{alias}}( N, D, E, info )
    0
    > D
    <Float64Array>[ 4, 4.75, ~5.15789 ]
    > E
    <Float64Array>[ 0.25, ~0.42105 ]

    // Using typed array views:
    > var D0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 5.0, 6.0 ] );
    > var E0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0 ] );
    > D = new Float64Array( D0.buffer, D0.BYTES_PER_ELEMENT*1 );
    > E = new Float64Array( E0.buffer, E0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( N, D, E, info )
    0
    > D0
    <Float64Array>[ 0.0, 4.0, 4.75, ~5.15789 ]
    > E0
    <Float64Array>[ 0.0, 0.25, ~0.42105 ]


{{alias}}.ndarray( N, D, strideD, offsetD, E, strideE, offsetE, info )
    Computes the `L * D * L ** T` factorization of real symmetric positive
    definite tridiagonal matrix `A` using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Order of matrix `A`.

    D: Float64Array
        Diagonal elements of `A`.

    strideD: integer
        Stride length for `D`.

    offsetD: integer
        Starting index for `D`.

    E: Float64Array
        Subdiagonal elements of `A`.

    strideE: integer
        Stride length for `E`.

    offsetE: integer
        Starting index for `E`.

    info: integer
        Status code.

    Returns
    -------
    info: integer
        Status code.

    Examples
    --------
    > var N = 3;
    > var info = 0;
    > var D = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 5.0, 6.0 ] );
    > var E = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0 ] );
    > {{alias}}.ndarray( N, D, 1, 1, E, 1, 1, info )
    0
    > D
    <Float64Array>[ 0.0, 4.0, 4.75, ~5.15789 ]
    > E
    <Float64Array>[ 0.0, 0.25, ~0.42105 ]

    See Also
    --------
