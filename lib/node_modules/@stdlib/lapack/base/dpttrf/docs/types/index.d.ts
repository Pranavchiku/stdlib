/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

/**
* Interface describing `dpttrf`.
*/
interface Routine {
	/**
	* Compute the `L * D * L ** T` factorization of real symmetric positive definite tridiagonal matrix `A`.
	*
	* @param N - order of matrix `A`
	* @param D - the N diagonal elements of `A`
	* @param E - the ( N-1 ) subdiagonal elements of `A`
	* @param info - status code, `0` if successful, `<0` if i-th argument had an illegal value, `>0` if leading principal minor of order `i` is not positive; if `<N` then factorization could not be completed, if `>N` then the factorization was completed, but `D(N) <= 0`
	* @returns status code
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var N = 3;
	* var info = 0;
	* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
	* var E = new Float64Array( [ 1.0, 2.0 ] );
	*
	* dpttrf( N, D, E, info );
	* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
	* // E => <Float64Array>[ 0.25, ~0.4210 ]
	*/
	( N: number, D: Float64Array, E: Float64Array, info: number ): number;

	/**
	* Computes the `L * D * L ** T` factorization of real symmetric positive definite tridiagonal matrix `A` using alternative indexing semantics.
	*
	* @param N - order of matrix `A`
	* @param D - the N diagonal elements of `A`
	* @param strideD - stride length for `D`
	* @param offsetD - starting index of `D`
	* @param E - the ( N-1 ) subdiagonal elements of `A`
	* @param strideE - stride length for `E`
	* @param offsetE - starting index of `E`
	* @param info - status code, `0` if successful, `<0` if i-th argument had an illegal value, `>0` if leading principal minor of order `i` is not positive; if `<N` then factorization could not be completed, if `>N` then the factorization was completed, but `D(N) <= 0`
	* @returns status code
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var N = 3;
	* var info = 0;
	* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
	* var E = new Float64Array( [ 1.0, 2.0 ] );
	*
	* dpttrf.ndarray( N, D, 1, 0, E, 1, 0, info );
	* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
	* // E => <Float64Array>[ 0.25, ~0.4210 ]
	*/
	ndarray( N: number, D: Float64Array, strideD: number, offsetD: number, E: Float64Array, strideE: number, offsetE: number, info: number ): number;
}

/**
* Compute the `L * D * L ** T` factorization of real symmetric positive definite tridiagonal matrix `A`.
*
* @param N - order of matrix `A`
* @param D - the N diagonal elements of `A`
* @param E - the ( N-1 ) subdiagonal elements of `A`
* @param info - status code, `0` if successful, `<0` if i-th argument had an illegal value, `>0` if leading principal minor of order `i` is not positive; if `<N` then factorization could not be completed, if `>N` then the factorization was completed, but `D(N) <= 0`
* @returns status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var N = 3;
* var info = 0;
* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
* var E = new Float64Array( [ 1.0, 2.0 ] );
*
* dpttrf( N, D, E, info );
* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
* // E => <Float64Array>[ 0.25, ~0.4210 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var N = 3;
* var info = 0;
* var D = new Float64Array( [ 4.0, 5.0, 6.0 ] );
* var E = new Float64Array( [ 1.0, 2.0 ] );
*
* dpttrf.ndarray( N, D, 1, 0, E, 1, 0, info );
* // D => <Float64Array>[ 4, 4.75, ~5.15789 ]
* // E => <Float64Array>[ 0.25, ~0.4210 ]
*/
declare var dpttrf: Routine;


// EXPORTS //

export = dpttrf;
