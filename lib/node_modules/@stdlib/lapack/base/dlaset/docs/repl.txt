
{{alias}}( order, uplo, M, N, alpha, beta, A, LDA )
    Initializes an `M` by `N` matrix `A` to `beta` on the diagonal
    and `alpha` on the off-diagonals.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied.

    M: integer
        Number of row in `A`.

    N: integer
        Number of columns in `A`.

    alpha: number
        Scalar constant to which off-diagonal elements are set.

    beta: number
        Scalar constant to which diagonal elements are set.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    Returns
    -------
    A: Float64Array
        Output matrix.

    Examples
    --------
    // Standard usage:
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 'row-major', 'lower', 2, 2, 3.1, 3.7, A, 2 )
    <Float64Array>[ 3.7, 0.0, 3.1, 3.7 ]

    // Using typed array views:
    > var A0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
    > var A1 = new {{alias:@stdlib/array/float64}}( A0.buffer, A0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( 'row-major', 'lower', 2, 2, 3.1, 3.7, A1, 2 );
    > A0
    <Float64Array>[ 0.0, 3.7, 0.0, 3.1, 3.7 ]


{{alias}}.ndarray( order, uplo, M, N, alpha, beta, A, LDA, offsetA )
    Initializes an `M` by `N` matrix `A` to `beta` on the diagonal
    and `alpha` on the off-diagonals using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied.

    M: integer
        Number of row in `A`.

    N: integer
        Number of columns in `A`.

    alpha: number
        Scalar constant to which off-diagonal elements are set.

    beta: number
        Scalar constant to which diagonal elements are set.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    offsetA: integer
        Starting index for `A`.

    Returns
    -------
    A: Float64Array
        Output matrix.

    Examples
    --------
    // Standard usage:
    // Standard usage:
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 'row-major', 'lower', 2, 2, 3.1, 3.7, A, 2, 0 )
    <Float64Array>[ 3.7, 0.0, 3.1, 3.7 ]

    // Advanced indexing:
    > A = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 'row-major', 'lower', 2, 2, 3.1, 3.7, A, 2, 1 )
    <Float64Array>[ 0.0, 3.7, 0.0, 3.1, 3.7 ]

    See Also
    --------
