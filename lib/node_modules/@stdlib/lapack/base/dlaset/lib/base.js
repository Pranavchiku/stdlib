/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var min = require( '@stdlib/math/base/special/fast/min' );


// MAIN //

/**
* Initializes an `M` by `N` matrix `A` to `beta` on the diagonal and `alpha` on the off-diagonals.
*
* @private
* @param {string} order - storage layout
* @param {string} uplo - specifies whether the upper or lower triangular part of matrix `A` is supplied
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} alpha - scalar constant to which off-diagonal elements are set
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* dlaset( 'row-major', 'lower', 3, 3, 3.1, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 0.0, 0.0, 3.1, 3.7, 0.0, 3.1, 3.1, 3.7 ]
*/
function dlaset( order, uplo, M, N, alpha, beta, A, strideA1, strideA2, offsetA ) { // eslint-disable-line max-len
	var sa0;
	var sa1;
	var i;
	var j;

	if ( order === 'row-major' ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		sa0 = strideA2; // stride for innermost loop
		sa1 = strideA1; // stride for outermost loop
	} else { // order == 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		sa0 = strideA1; // stride for innermost loop
		sa1 = strideA2; // stride for outermost loop
	}

	if ( uplo === 'upper' ) {
		if ( order === 'column-major' ) {
			for ( j = 1; j < N; j++ ) {
				for ( i = 0; i < min( j - 1, M ); i++ ) {
					A[ offsetA + ( j * sa1 ) + ( i * sa0 ) ] = alpha;
				}
			}
			for ( i = 0; i < min( M, N ); i++ ) {
				A[ offsetA + ( i * sa0 ) + ( i * sa1 ) ] = beta;
			}
			return A;
		}
		// order === 'row-major'
		for ( j = 1; j < N; j++ ) {
			for ( i = 0; i < min( j - 1, M ); i++ ) {
				A[ offsetA + ( i * sa1 ) + ( j * sa0 ) ] = alpha;
			}
		}
		for ( i = 0; i < min( M, N ); i++ ) {
			A[ offsetA + ( i * sa0 ) + ( i * sa1 ) ] = beta;
		}
		return A;
	}
	if ( uplo === 'lower' ) {
		if ( order === 'column-major' ) {
			for ( j = 0; j < min( M, N ); j++ ) {
				for ( i = j + 1; i < M; i++ ) {
					A[ offsetA + ( j * sa1 ) + ( i * sa0 ) ] = alpha;
				}
			}
			for ( i = 0; i < min( M, N ); i++ ) {
				A[ offsetA + ( i * sa0 ) + ( i * sa1 ) ] = beta;
			}
			return A;
		}
		// order === 'row-major'
		for ( j = 0; j < min( M, N ); j++ ) {
			for ( i = j + 1; i < M; i++ ) {
				A[ offsetA + ( i * sa1 ) + ( j * sa0 ) ] = alpha;
			}
		}
		for ( i = 0; i < min( M, N ); i++ ) {
			A[ offsetA + ( i * sa0 ) + ( i * sa1 ) ] = beta;
		}
		return A;
	}
	// All of the matrix `A`
	if ( order === 'column-major' ) {
		for ( j = 0; j < N; j++ ) {
			for ( i = 0; i < M; i++ ) {
				A[ offsetA + ( j * sa1 ) + ( i * sa0 ) ] = alpha;
			}
		}
		for ( i = 0; i < min( M, N ); i++ ) {
			A[ offsetA + ( i * sa0 ) + ( i * sa1 ) ] = beta;
		}
		return A;
	}
	// order === 'row-major'
	for ( j = 0; j < N; j++ ) {
		for ( i = 0; i < M; i++ ) {
			A[ offsetA + ( i * sa1 ) + ( j * sa0 ) ] = alpha;
		}
	}
	for ( i = 0; i < min( M, N ); i++ ) {
		A[ offsetA + ( i * sa0 )+ ( i * sa1 ) ] = beta;
	}
	return A;
}


// EXPORTS //

module.exports = dlaset;
