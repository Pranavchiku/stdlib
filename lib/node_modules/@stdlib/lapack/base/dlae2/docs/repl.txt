
{{alias}}( A, B, C, Out )
    Computes the eigenvalues of a 2x2 symmetric matrix.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    A: number
        The (0,0) element of matrix.

    B: number
        The (0,1) & (1,0) elements of matrix.

    C: number
        The (1,1) element of matrix.

    Out: Float64Array
        Output array containing eigenvalue of larger and smaller absolute value
        respectively.

    Returns
    -------
    Out: Float64Array
        Output array.

    Examples
    --------
    > var out = new {{alias:@stdlib/array/float64}}( 2 );
    > {{alias}}( 2.0, 3.0, 4.0, out )
    <Float64Array>[ 6.16227766016838, -0.1622776601683793 ]


{{alias}}.ndarray( A, B, C, Out, strideOut, offsetOut )
    Computes the eigenvalues of a 2x2 symmetric matrix using alternative
    indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    A: number
        The (0,0) element of matrix.

    B: number
        The (0,1) & (1,0) elements of matrix.

    C: number
        The (1,1) element of matrix.

    Out: Float64Array
        Output array containing eigenvalue of larger and smaller absolute value
        respectively.

    strideOut: integer
        Stride length for `Out`.

    offsetOut: integer
        Starting index of `Out`.

    Returns
    -------
    B: Float64Array
        Output matrix.

    Examples
    --------
    > var out = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2.0, 3.0, 4.0, out, 1, 1 )
    <Float64Array>[ 0.0, 6.16227766016838, -0.1622776601683793 ]

    See Also
    --------
