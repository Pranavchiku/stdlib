/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var dswap = require( '@stdlib/blas/base/dswap' ).ndarray;


// MAIN //

/**
* Performs a series of row interchanges on the matrix `A` using pivot indices stored in `IPIV`.
*
* @param {string} order - storage layout
* @param {PositiveInteger} N - number of columns of `A`
* @param {Float64Array} A - matrix
* @param {PositiveInteger} offsetA - index offset for `A`
* @param {PositiveInteger} LDA - leading dimension of `A`
* @param {PositiveInteger} k1 - index of first row to interchange
* @param {PositiveInteger} k2 - index of last row to interchange
* @param {Int32Array} IPIV - vector of pivot indices
* @param {PositiveInteger} strideIPIV - increment between successive values of `IPIV`
* @returns {Float64Array} permuted matrix `A`
*
* @example
* var Int32Array = require( '@stdlib/array/int32' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var IPIV = new Int32Array( [ 2, 0, 1 ] );
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dlaswp( 'row-major', 3, A, 0, 2, 0, 2, IPIV, 1 );
* // A => <Float64Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]
*/
function dlaswp( order, N, A, offsetA, LDA, k1, k2, IPIV, strideIPIV ) {
	var inc;
	var ix0;
	var n32;
	var tmp;
	var i2;
	var ip;
	var ix;
	var i1;
	var i;
	var j;
	var k;

	if ( strideIPIV > 0 ) {
		ix0 = k1;
		i1 = k1;
		i2 = k2;
		inc = 1;
	} else if ( strideIPIV < 0 ) {
		ix0 = k1 + ( ( k1 - k2 ) * strideIPIV );
		i1 = k2;
		i2 = k1;
		inc = -1;
	} else {
		return A;
	}

	if ( order === 'row-major' ) {
		ix = ix0;
		if ( inc === 1 ) {
			for ( k = i1; k <= i2; k++ ) {
				ip = IPIV[ ix ];
				if ( ip !== k ) {
					dswap( LDA, A, 1, offsetA + ( k * LDA ), A, 1, offsetA + ( ip * LDA ) ); // eslint-disable-line max-len
				}
				ix += strideIPIV;
			}
			return A;
		}
		for ( k = i1; k >= i2; k-- ) {
			ip = IPIV[ ix ];
			if ( ip !== k ) {
				dswap( LDA, A, 1, offsetA + ( k * LDA ), A, 1, offsetA + ( ip * LDA ) ); // eslint-disable-line max-len
			}
			ix += strideIPIV;
		}
		return A;
	}
	// order === 'column-major'
	n32 = floor( N / 32 ) * 32;
	if ( n32 !== 0 ) {
		for ( j = 1; j < n32; j += 32 ) {
			ix = ix0;
			for ( i = i1; i < i2; i += inc ) {
				ip = IPIV[ ix ];
				if ( ip !== i ) {
					for ( k = j; k < j + 31; k++ ) {
						tmp = A[ offsetA + ( ( k - 1 ) * LDA ) + i ];
						A[ offsetA + ( ( k - 1 ) * LDA ) + i ] = A[ offsetA + ( ( k - 1 ) * LDA ) + ip ]; // eslint-disable-line max-len
						A[ offsetA + ( ( k - 1 ) * LDA ) + ip ] = tmp;
					}
				}
				ix += strideIPIV;
			}
		}
	}
	if ( n32 !== N ) {
		n32 += 1;
		ix = ix0;
		for ( i = i1; i < i2; i += inc ) {
			ip = IPIV[ ix ];
			if ( ip !== i ) {
				for ( k = n32; k < N; k++ ) {
					tmp = A[ offsetA + ( ( k - 1 ) * LDA ) + i ];
					A[ offsetA + ( ( k - 1 ) * LDA ) + i ] = A[ offsetA + ( ( k - 1 ) * LDA ) + ip ]; // eslint-disable-line max-len
					A[ offsetA + ( ( k - 1 ) * LDA ) + ip ] = tmp;
				}
			}
			ix += strideIPIV;
		}
	}
	return A;
}


// EXPORTS //

module.exports = dlaswp;
