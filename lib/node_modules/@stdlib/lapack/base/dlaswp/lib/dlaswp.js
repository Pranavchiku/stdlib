/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var base = require( './base.js' );


// MAIN //

/**
* Performs a series of row interchanges on the matrix `A` using pivot indices stored in `IPIV`.
*
* @param {string} order - storage layout
* @param {PositiveInteger} N - number of columns in `A`
* @param {Float64Array} A - matrix
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {PositiveInteger} k1 - index of first row to interchange
* @param {PositiveInteger} k2 - index of last row to interchange
* @param {Int32Array} IPIV - vector of pivot indices
* @param {PositiveInteger} strideIPIV - increment between successive values of `IPIV`
* @throws {TypeError} first argument must be a valid order
* @returns {Float64Array} permuted matrix `A`
*
* @example
* var Int32Array = require( '@stdlib/array/int32' );
* var Float64Array = require( '@stdlib/array/float64' );
*
* var IPIV = new Int32Array( [ 2, 0, 1 ] );
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dlaswp( 'row-major', 3, A, 2, 0, 2, IPIV, 1 );
* // A => <Float64Array>[ 3.0, 4.0, 1.0, 2.0, 5.0, 6.0 ]
*/
function dlaswp( order, N, A, LDA, k1, k2, IPIV, strideIPIV ) {
	if ( !isLayout( order ) ) {
		throw new TypeError( 'invalid argument. Order argument must be a string indicating whether an array is row-major (i.e., order is `row-major`) or column-major (i.e., order is `column-major`).' );
	}
	return base( order, N, A, LDA, 0, k1, k2, IPIV, strideIPIV, 0 );
}


// EXPORTS //

module.exports = dlaswp;
